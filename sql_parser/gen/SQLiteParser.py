# Generated from C:/Users/giena/PycharmProjects/CC/sql_parser\SQLite.g4 by ANTLR 4.9.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009d")
        buf.write("\u04d6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\3\2\7\2x\n\2\f\2\16\2{\13\2\3\2\3\2\3\3\7\3\u0080\n")
        buf.write("\3\f\3\16\3\u0083\13\3\3\3\3\3\6\3\u0087\n\3\r\3\16\3")
        buf.write("\u0088\3\3\7\3\u008c\n\3\f\3\16\3\u008f\13\3\3\3\7\3\u0092")
        buf.write("\n\3\f\3\16\3\u0095\13\3\3\4\3\4\3\4\5\4\u009a\n\4\5\4")
        buf.write("\u009c\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00b1\n\4\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\5\5\u00ba\n\5\3\6\3\6\5\6\u00be\n")
        buf.write("\6\3\6\3\6\3\6\3\6\3\7\3\7\5\7\u00c6\n\7\3\7\3\7\5\7\u00ca")
        buf.write("\n\7\5\7\u00cc\n\7\3\b\3\b\3\b\5\b\u00d1\n\b\5\b\u00d3")
        buf.write("\n\b\3\t\3\t\5\t\u00d7\n\t\3\t\3\t\3\t\7\t\u00dc\n\t\f")
        buf.write("\t\16\t\u00df\13\t\5\t\u00e1\n\t\3\t\3\t\3\t\5\t\u00e6")
        buf.write("\n\t\3\t\3\t\5\t\u00ea\n\t\3\t\6\t\u00ed\n\t\r\t\16\t")
        buf.write("\u00ee\3\t\3\t\3\t\3\t\3\t\7\t\u00f6\n\t\f\t\16\t\u00f9")
        buf.write("\13\t\5\t\u00fb\n\t\3\t\3\t\3\t\3\t\5\t\u0101\n\t\5\t")
        buf.write("\u0103\n\t\3\n\5\n\u0106\n\n\3\n\3\n\3\n\3\n\3\n\5\n\u010d")
        buf.write("\n\n\3\13\5\13\u0110\n\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u0117\n\13\3\13\3\13\3\13\3\13\3\13\7\13\u011e\n\13\f")
        buf.write("\13\16\13\u0121\13\13\5\13\u0123\n\13\3\13\3\13\3\13\3")
        buf.write("\13\5\13\u0129\n\13\5\13\u012b\n\13\3\f\3\f\5\f\u012f")
        buf.write("\n\f\3\f\3\f\3\r\3\r\5\r\u0135\n\r\3\r\3\r\3\r\7\r\u013a")
        buf.write("\n\r\f\r\16\r\u013d\13\r\5\r\u013f\n\r\3\r\3\r\3\r\3\r")
        buf.write("\7\r\u0145\n\r\f\r\16\r\u0148\13\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\7\r\u014f\n\r\f\r\16\r\u0152\13\r\5\r\u0154\n\r\3\r\3")
        buf.write("\r\3\r\3\r\5\r\u015a\n\r\5\r\u015c\n\r\3\16\5\16\u015f")
        buf.write("\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0172\n\16\3")
        buf.write("\16\3\16\3\16\3\16\5\16\u0178\n\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\7\16\u017f\n\16\f\16\16\16\u0182\13\16\3\16\3\16")
        buf.write("\5\16\u0186\n\16\3\16\3\16\3\16\3\16\3\16\7\16\u018d\n")
        buf.write("\16\f\16\16\16\u0190\13\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\7\16\u0198\n\16\f\16\16\16\u019b\13\16\3\16\3\16\7")
        buf.write("\16\u019f\n\16\f\16\16\16\u01a2\13\16\3\16\3\16\3\16\5")
        buf.write("\16\u01a7\n\16\3\17\3\17\3\17\3\17\5\17\u01ad\n\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u01b6\n\17\3\20\3")
        buf.write("\20\5\20\u01ba\n\20\3\20\3\20\3\21\3\21\3\21\5\21\u01c1")
        buf.write("\n\21\5\21\u01c3\n\21\3\21\3\21\5\21\u01c7\n\21\3\21\5")
        buf.write("\21\u01ca\n\21\3\22\3\22\3\22\3\23\3\23\5\23\u01d1\n\23")
        buf.write("\3\23\3\23\3\23\7\23\u01d6\n\23\f\23\16\23\u01d9\13\23")
        buf.write("\5\23\u01db\n\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u01e3")
        buf.write("\n\23\f\23\16\23\u01e6\13\23\5\23\u01e8\n\23\3\23\3\23")
        buf.write("\3\23\3\23\5\23\u01ee\n\23\5\23\u01f0\n\23\3\24\3\24\5")
        buf.write("\24\u01f4\n\24\3\24\3\24\3\24\7\24\u01f9\n\24\f\24\16")
        buf.write("\24\u01fc\13\24\5\24\u01fe\n\24\3\24\3\24\3\24\3\24\7")
        buf.write("\24\u0204\n\24\f\24\16\24\u0207\13\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\7\24\u020e\n\24\f\24\16\24\u0211\13\24\5\24\u0213")
        buf.write("\n\24\3\24\3\24\3\24\3\24\5\24\u0219\n\24\5\24\u021b\n")
        buf.write("\24\3\25\3\25\5\25\u021f\n\25\3\25\3\25\3\25\7\25\u0224")
        buf.write("\n\25\f\25\16\25\u0227\13\25\3\25\3\25\3\25\3\25\7\25")
        buf.write("\u022d\n\25\f\25\16\25\u0230\13\25\3\25\5\25\u0233\n\25")
        buf.write("\5\25\u0235\n\25\3\25\3\25\5\25\u0239\n\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\7\25\u0240\n\25\f\25\16\25\u0243\13\25\3")
        buf.write("\25\3\25\5\25\u0247\n\25\5\25\u0249\n\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\7\25\u0250\n\25\f\25\16\25\u0253\13\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\7\25\u025b\n\25\f\25\16\25\u025e")
        buf.write("\13\25\3\25\3\25\7\25\u0262\n\25\f\25\16\25\u0265\13\25")
        buf.write("\5\25\u0267\n\25\3\26\5\26\u026a\n\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0277\n\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26")
        buf.write("\u0283\n\26\f\26\16\26\u0286\13\26\3\26\3\26\5\26\u028a")
        buf.write("\n\26\3\27\5\27\u028d\n\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\5\27\u029a\n\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u02a6\n")
        buf.write("\27\f\27\16\27\u02a9\13\27\3\27\3\27\5\27\u02ad\n\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\7\27\u02b4\n\27\f\27\16\27\u02b7")
        buf.write("\13\27\5\27\u02b9\n\27\3\27\3\27\3\27\3\27\5\27\u02bf")
        buf.write("\n\27\5\27\u02c1\n\27\3\30\3\30\3\31\6\31\u02c6\n\31\r")
        buf.write("\31\16\31\u02c7\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u02d4\n\31\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\5\32\u02dc\n\32\3\32\3\32\3\32\5\32\u02e1\n\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u02ea\n\32\3\32\3")
        buf.write("\32\3\32\7\32\u02ef\n\32\f\32\16\32\u02f2\13\32\3\32\5")
        buf.write("\32\u02f5\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0305\n\32\3\32\5")
        buf.write("\32\u0308\n\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0310")
        buf.write("\n\32\3\32\3\32\3\32\3\32\3\32\6\32\u0317\n\32\r\32\16")
        buf.write("\32\u0318\3\32\3\32\5\32\u031d\n\32\3\32\3\32\3\32\5\32")
        buf.write("\u0322\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0340")
        buf.write("\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\5\32\u034c\n\32\3\32\3\32\3\32\5\32\u0351\n\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u035d")
        buf.write("\n\32\3\32\3\32\3\32\3\32\5\32\u0363\n\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\5\32\u036a\n\32\3\32\3\32\5\32\u036e\n\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u0376\n\32\f\32\16")
        buf.write("\32\u0379\13\32\5\32\u037b\n\32\3\32\3\32\3\32\3\32\5")
        buf.write("\32\u0381\n\32\3\32\5\32\u0384\n\32\7\32\u0386\n\32\f")
        buf.write("\32\16\32\u0389\13\32\3\33\3\33\3\33\3\33\3\33\3\33\5")
        buf.write("\33\u0391\n\33\3\33\3\33\3\34\3\34\5\34\u0397\n\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\7\34\u03a5\n\34\f\34\16\34\u03a8\13\34\3\35\3\35\3\35")
        buf.write("\5\35\u03ad\n\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u03b5")
        buf.write("\n\35\3\36\3\36\3\36\5\36\u03ba\n\36\3\36\5\36\u03bd\n")
        buf.write("\36\3\37\3\37\3\37\5\37\u03c2\n\37\3 \3 \3 \3 \3 \7 \u03c9")
        buf.write("\n \f \16 \u03cc\13 \3 \3 \5 \u03d0\n \3 \3 \3 \3 \3 ")
        buf.write("\3!\3!\3!\3!\3!\3!\3!\5!\u03de\n!\3!\5!\u03e1\n!\5!\u03e3")
        buf.write("\n!\3\"\3\"\3\"\5\"\u03e8\n\"\3\"\3\"\5\"\u03ec\n\"\3")
        buf.write("\"\5\"\u03ef\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u03f6\n\"\3\"")
        buf.write("\3\"\3\"\3\"\7\"\u03fc\n\"\f\"\16\"\u03ff\13\"\3\"\5\"")
        buf.write("\u0402\n\"\3\"\3\"\5\"\u0406\n\"\3\"\5\"\u0409\n\"\3\"")
        buf.write("\3\"\3\"\3\"\5\"\u040f\n\"\3\"\5\"\u0412\n\"\5\"\u0414")
        buf.write("\n\"\3#\3#\3#\3#\3#\7#\u041b\n#\f#\16#\u041e\13#\3$\3")
        buf.write("$\5$\u0422\n$\3$\3$\5$\u0426\n$\3$\3$\5$\u042a\n$\3$\5")
        buf.write("$\u042d\n$\3%\3%\3%\3%\3%\3%\3%\7%\u0436\n%\f%\16%\u0439")
        buf.write("\13%\3%\3%\5%\u043d\n%\3&\3&\5&\u0441\n&\3&\3&\3&\7&\u0446")
        buf.write("\n&\f&\16&\u0449\13&\3&\3&\3&\3&\7&\u044f\n&\f&\16&\u0452")
        buf.write("\13&\3&\5&\u0455\n&\5&\u0457\n&\3&\3&\5&\u045b\n&\3&\3")
        buf.write("&\3&\3&\3&\7&\u0462\n&\f&\16&\u0465\13&\3&\3&\5&\u0469")
        buf.write("\n&\5&\u046b\n&\3&\3&\3&\3&\3&\7&\u0472\n&\f&\16&\u0475")
        buf.write("\13&\3&\3&\3&\3&\3&\3&\7&\u047d\n&\f&\16&\u0480\13&\3")
        buf.write("&\3&\7&\u0484\n&\f&\16&\u0487\13&\5&\u0489\n&\3\'\3\'")
        buf.write("\3\'\3\'\3\'\5\'\u0490\n\'\3(\3(\3(\3(\3(\7(\u0497\n(")
        buf.write("\f(\16(\u049a\13(\3(\3(\5(\u049e\n(\3)\5)\u04a1\n)\3)")
        buf.write("\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61")
        buf.write("\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66")
        buf.write("\3\67\3\67\38\38\39\39\39\39\39\39\59\u04c9\n9\3:\3:\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\5;\u04d4\n;\3;\3\u02c7\3\62<\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt\2\21\5\2<<GGTT\4\2\61")
        buf.write("\61DD\4\2\7\7ll\4\2\37\37@@\4\2\t\t\16\17\3\2\n\13\3\2")
        buf.write("\20\23\3\2\24\27\6\2OOcceexx\5\2\33\33JJ\177\177\4\2$")
        buf.write("$>>\6\2\668jj\u0098\u0098\u009a\u009b\4\2\n\fhh\4\2\u0097")
        buf.write("\u0097\u009a\u009a\3\2\33\u0096\2\u059a\2y\3\2\2\2\4\u0081")
        buf.write("\3\2\2\2\6\u009b\3\2\2\2\b\u00b2\3\2\2\2\n\u00bb\3\2\2")
        buf.write("\2\f\u00c3\3\2\2\2\16\u00cd\3\2\2\2\20\u00e0\3\2\2\2\22")
        buf.write("\u0105\3\2\2\2\24\u010f\3\2\2\2\26\u012c\3\2\2\2\30\u013e")
        buf.write("\3\2\2\2\32\u015e\3\2\2\2\34\u01a8\3\2\2\2\36\u01b7\3")
        buf.write("\2\2\2 \u01bd\3\2\2\2\"\u01cb\3\2\2\2$\u01da\3\2\2\2&")
        buf.write("\u01fd\3\2\2\2(\u0266\3\2\2\2*\u0269\3\2\2\2,\u028c\3")
        buf.write("\2\2\2.\u02c2\3\2\2\2\60\u02c5\3\2\2\2\62\u0321\3\2\2")
        buf.write("\2\64\u038a\3\2\2\2\66\u0394\3\2\2\28\u03ac\3\2\2\2:\u03b6")
        buf.write("\3\2\2\2<\u03c1\3\2\2\2>\u03c3\3\2\2\2@\u03e2\3\2\2\2")
        buf.write("B\u0413\3\2\2\2D\u0415\3\2\2\2F\u042c\3\2\2\2H\u043c\3")
        buf.write("\2\2\2J\u0488\3\2\2\2L\u048f\3\2\2\2N\u0491\3\2\2\2P\u04a0")
        buf.write("\3\2\2\2R\u04a4\3\2\2\2T\u04a6\3\2\2\2V\u04a8\3\2\2\2")
        buf.write("X\u04aa\3\2\2\2Z\u04ac\3\2\2\2\\\u04ae\3\2\2\2^\u04b0")
        buf.write("\3\2\2\2`\u04b2\3\2\2\2b\u04b4\3\2\2\2d\u04b6\3\2\2\2")
        buf.write("f\u04b8\3\2\2\2h\u04ba\3\2\2\2j\u04bc\3\2\2\2l\u04be\3")
        buf.write("\2\2\2n\u04c0\3\2\2\2p\u04c8\3\2\2\2r\u04ca\3\2\2\2t\u04d3")
        buf.write("\3\2\2\2vx\5\4\3\2wv\3\2\2\2x{\3\2\2\2yw\3\2\2\2yz\3\2")
        buf.write("\2\2z|\3\2\2\2{y\3\2\2\2|}\7\2\2\3}\3\3\2\2\2~\u0080\7")
        buf.write("\3\2\2\177~\3\2\2\2\u0080\u0083\3\2\2\2\u0081\177\3\2")
        buf.write("\2\2\u0081\u0082\3\2\2\2\u0082\u0084\3\2\2\2\u0083\u0081")
        buf.write("\3\2\2\2\u0084\u008d\5\6\4\2\u0085\u0087\7\3\2\2\u0086")
        buf.write("\u0085\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u0086\3\2\2\2")
        buf.write("\u0088\u0089\3\2\2\2\u0089\u008a\3\2\2\2\u008a\u008c\5")
        buf.write("\6\4\2\u008b\u0086\3\2\2\2\u008c\u008f\3\2\2\2\u008d\u008b")
        buf.write("\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0093\3\2\2\2\u008f")
        buf.write("\u008d\3\2\2\2\u0090\u0092\7\3\2\2\u0091\u0090\3\2\2\2")
        buf.write("\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2\u0093\u0094\3")
        buf.write("\2\2\2\u0094\5\3\2\2\2\u0095\u0093\3\2\2\2\u0096\u0099")
        buf.write("\7I\2\2\u0097\u0098\7t\2\2\u0098\u009a\7q\2\2\u0099\u0097")
        buf.write("\3\2\2\2\u0099\u009a\3\2\2\2\u009a\u009c\3\2\2\2\u009b")
        buf.write("\u0096\3\2\2\2\u009b\u009c\3\2\2\2\u009c\u00b0\3\2\2\2")
        buf.write("\u009d\u00b1\5\b\5\2\u009e\u00b1\5\n\6\2\u009f\u00b1\5")
        buf.write("\f\7\2\u00a0\u00b1\5\16\b\2\u00a1\u00b1\5\20\t\2\u00a2")
        buf.write("\u00b1\5\22\n\2\u00a3\u00b1\5\24\13\2\u00a4\u00b1\5\26")
        buf.write("\f\2\u00a5\u00b1\5\30\r\2\u00a6\u00b1\5\32\16\2\u00a7")
        buf.write("\u00b1\5\34\17\2\u00a8\u00b1\5\36\20\2\u00a9\u00b1\5 ")
        buf.write("\21\2\u00aa\u00b1\5\"\22\2\u00ab\u00b1\5$\23\2\u00ac\u00b1")
        buf.write("\5&\24\2\u00ad\u00b1\5*\26\2\u00ae\u00b1\5,\27\2\u00af")
        buf.write("\u00b1\5.\30\2\u00b0\u009d\3\2\2\2\u00b0\u009e\3\2\2\2")
        buf.write("\u00b0\u009f\3\2\2\2\u00b0\u00a0\3\2\2\2\u00b0\u00a1\3")
        buf.write("\2\2\2\u00b0\u00a2\3\2\2\2\u00b0\u00a3\3\2\2\2\u00b0\u00a4")
        buf.write("\3\2\2\2\u00b0\u00a5\3\2\2\2\u00b0\u00a6\3\2\2\2\u00b0")
        buf.write("\u00a7\3\2\2\2\u00b0\u00a8\3\2\2\2\u00b0\u00a9\3\2\2\2")
        buf.write("\u00b0\u00aa\3\2\2\2\u00b0\u00ab\3\2\2\2\u00b0\u00ac\3")
        buf.write("\2\2\2\u00b0\u00ad\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b0\u00af")
        buf.write("\3\2\2\2\u00b1\7\3\2\2\2\u00b2\u00b9\7!\2\2\u00b3\u00ba")
        buf.write("\5`\61\2\u00b4\u00ba\5d\63\2\u00b5\u00b6\5`\61\2\u00b6")
        buf.write("\u00b7\7\4\2\2\u00b7\u00b8\5d\63\2\u00b8\u00ba\3\2\2\2")
        buf.write("\u00b9\u00b3\3\2\2\2\u00b9\u00b4\3\2\2\2\u00b9\u00b5\3")
        buf.write("\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\t\3\2\2\2\u00bb\u00bd")
        buf.write("\7%\2\2\u00bc\u00be\79\2\2\u00bd\u00bc\3\2\2\2\u00bd\u00be")
        buf.write("\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c0\5\62\32\2\u00c0")
        buf.write("\u00c1\7#\2\2\u00c1\u00c2\5`\61\2\u00c2\13\3\2\2\2\u00c3")
        buf.write("\u00c5\7(\2\2\u00c4\u00c6\t\2\2\2\u00c5\u00c4\3\2\2\2")
        buf.write("\u00c5\u00c6\3\2\2\2\u00c6\u00cb\3\2\2\2\u00c7\u00c9\7")
        buf.write("\u0089\2\2\u00c8\u00ca\5r:\2\u00c9\u00c8\3\2\2\2\u00c9")
        buf.write("\u00ca\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00c7\3\2\2\2")
        buf.write("\u00cb\u00cc\3\2\2\2\u00cc\r\3\2\2\2\u00cd\u00d2\t\3\2")
        buf.write("\2\u00ce\u00d0\7\u0089\2\2\u00cf\u00d1\5r:\2\u00d0\u00cf")
        buf.write("\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2\u00d2")
        buf.write("\u00ce\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\17\3\2\2\2\u00d4")
        buf.write("\u00d6\7\u0095\2\2\u00d5\u00d7\7v\2\2\u00d6\u00d5\3\2")
        buf.write("\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00dd")
        buf.write("\5> \2\u00d9\u00da\7\7\2\2\u00da\u00dc\5> \2\u00db\u00d9")
        buf.write("\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd")
        buf.write("\u00de\3\2\2\2\u00de\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2")
        buf.write("\u00e0\u00d4\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2\3")
        buf.write("\2\2\2\u00e2\u00ec\5J&\2\u00e3\u00e5\7\u008b\2\2\u00e4")
        buf.write("\u00e6\7\37\2\2\u00e5\u00e4\3\2\2\2\u00e5\u00e6\3\2\2")
        buf.write("\2\u00e6\u00ea\3\2\2\2\u00e7\u00ea\7\\\2\2\u00e8\u00ea")
        buf.write("\7F\2\2\u00e9\u00e3\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9")
        buf.write("\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00ed\5J&\2\u00ec")
        buf.write("\u00e9\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ec\3\2\2\2")
        buf.write("\u00ee\u00ef\3\2\2\2\u00ef\u00fa\3\2\2\2\u00f0\u00f1\7")
        buf.write("o\2\2\u00f1\u00f2\7*\2\2\u00f2\u00f7\5:\36\2\u00f3\u00f4")
        buf.write("\7\7\2\2\u00f4\u00f6\5:\36\2\u00f5\u00f3\3\2\2\2\u00f6")
        buf.write("\u00f9\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2")
        buf.write("\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00f0\3")
        buf.write("\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u0102\3\2\2\2\u00fc\u00fd")
        buf.write("\7d\2\2\u00fd\u0100\5\62\32\2\u00fe\u00ff\t\4\2\2\u00ff")
        buf.write("\u0101\5\62\32\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2")
        buf.write("\2\u0101\u0103\3\2\2\2\u0102\u00fc\3\2\2\2\u0102\u0103")
        buf.write("\3\2\2\2\u0103\21\3\2\2\2\u0104\u0106\5\66\34\2\u0105")
        buf.write("\u0104\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0107\3\2\2\2")
        buf.write("\u0107\u0108\7=\2\2\u0108\u0109\7M\2\2\u0109\u010c\58")
        buf.write("\35\2\u010a\u010b\7\u0094\2\2\u010b\u010d\5\62\32\2\u010c")
        buf.write("\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\23\3\2\2\2\u010e")
        buf.write("\u0110\5\66\34\2\u010f\u010e\3\2\2\2\u010f\u0110\3\2\2")
        buf.write("\2\u0110\u0111\3\2\2\2\u0111\u0112\7=\2\2\u0112\u0113")
        buf.write("\7M\2\2\u0113\u0116\58\35\2\u0114\u0115\7\u0094\2\2\u0115")
        buf.write("\u0117\5\62\32\2\u0116\u0114\3\2\2\2\u0116\u0117\3\2\2")
        buf.write("\2\u0117\u012a\3\2\2\2\u0118\u0119\7o\2\2\u0119\u011a")
        buf.write("\7*\2\2\u011a\u011f\5:\36\2\u011b\u011c\7\7\2\2\u011c")
        buf.write("\u011e\5:\36\2\u011d\u011b\3\2\2\2\u011e\u0121\3\2\2\2")
        buf.write("\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0123\3")
        buf.write("\2\2\2\u0121\u011f\3\2\2\2\u0122\u0118\3\2\2\2\u0122\u0123")
        buf.write("\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0125\7d\2\2\u0125")
        buf.write("\u0128\5\62\32\2\u0126\u0127\t\4\2\2\u0127\u0129\5\62")
        buf.write("\32\2\u0128\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012b")
        buf.write("\3\2\2\2\u012a\u0122\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\25\3\2\2\2\u012c\u012e\7?\2\2\u012d\u012f\79\2\2\u012e")
        buf.write("\u012d\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0130\3\2\2\2")
        buf.write("\u0130\u0131\5`\61\2\u0131\27\3\2\2\2\u0132\u0134\7\u0095")
        buf.write("\2\2\u0133\u0135\7v\2\2\u0134\u0133\3\2\2\2\u0134\u0135")
        buf.write("\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u013b\5> \2\u0137\u0138")
        buf.write("\7\7\2\2\u0138\u013a\5> \2\u0139\u0137\3\2\2\2\u013a\u013d")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c")
        buf.write("\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u0132\3\2\2\2")
        buf.write("\u013e\u013f\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0146\5")
        buf.write("J&\2\u0141\u0142\5L\'\2\u0142\u0143\5J&\2\u0143\u0145")
        buf.write("\3\2\2\2\u0144\u0141\3\2\2\2\u0145\u0148\3\2\2\2\u0146")
        buf.write("\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0153\3\2\2\2")
        buf.write("\u0148\u0146\3\2\2\2\u0149\u014a\7o\2\2\u014a\u014b\7")
        buf.write("*\2\2\u014b\u0150\5:\36\2\u014c\u014d\7\7\2\2\u014d\u014f")
        buf.write("\5:\36\2\u014e\u014c\3\2\2\2\u014f\u0152\3\2\2\2\u0150")
        buf.write("\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0154\3\2\2\2")
        buf.write("\u0152\u0150\3\2\2\2\u0153\u0149\3\2\2\2\u0153\u0154\3")
        buf.write("\2\2\2\u0154\u015b\3\2\2\2\u0155\u0156\7d\2\2\u0156\u0159")
        buf.write("\5\62\32\2\u0157\u0158\t\4\2\2\u0158\u015a\5\62\32\2\u0159")
        buf.write("\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c\3\2\2\2")
        buf.write("\u015b\u0155\3\2\2\2\u015b\u015c\3\2\2\2\u015c\31\3\2")
        buf.write("\2\2\u015d\u015f\5\66\34\2\u015e\u015d\3\2\2\2\u015e\u015f")
        buf.write("\3\2\2\2\u015f\u0171\3\2\2\2\u0160\u0172\7Z\2\2\u0161")
        buf.write("\u0172\7|\2\2\u0162\u0163\7Z\2\2\u0163\u0164\7n\2\2\u0164")
        buf.write("\u0172\7|\2\2\u0165\u0166\7Z\2\2\u0166\u0167\7n\2\2\u0167")
        buf.write("\u0172\7\177\2\2\u0168\u0169\7Z\2\2\u0169\u016a\7n\2\2")
        buf.write("\u016a\u0172\7\33\2\2\u016b\u016c\7Z\2\2\u016c\u016d\7")
        buf.write("n\2\2\u016d\u0172\7J\2\2\u016e\u016f\7Z\2\2\u016f\u0170")
        buf.write("\7n\2\2\u0170\u0172\7S\2\2\u0171\u0160\3\2\2\2\u0171\u0161")
        buf.write("\3\2\2\2\u0171\u0162\3\2\2\2\u0171\u0165\3\2\2\2\u0171")
        buf.write("\u0168\3\2\2\2\u0171\u016b\3\2\2\2\u0171\u016e\3\2\2\2")
        buf.write("\u0172\u0173\3\2\2\2\u0173\u0177\7]\2\2\u0174\u0175\5")
        buf.write("`\61\2\u0175\u0176\7\4\2\2\u0176\u0178\3\2\2\2\u0177\u0174")
        buf.write("\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\3\2\2\2\u0179")
        buf.write("\u0185\5b\62\2\u017a\u017b\7\5\2\2\u017b\u0180\5f\64\2")
        buf.write("\u017c\u017d\7\7\2\2\u017d\u017f\5f\64\2\u017e\u017c\3")
        buf.write("\2\2\2\u017f\u0182\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181")
        buf.write("\3\2\2\2\u0181\u0183\3\2\2\2\u0182\u0180\3\2\2\2\u0183")
        buf.write("\u0184\7\6\2\2\u0184\u0186\3\2\2\2\u0185\u017a\3\2\2\2")
        buf.write("\u0185\u0186\3\2\2\2\u0186\u01a6\3\2\2\2\u0187\u0188\7")
        buf.write("\u0090\2\2\u0188\u0189\7\5\2\2\u0189\u018e\5\62\32\2\u018a")
        buf.write("\u018b\7\7\2\2\u018b\u018d\5\62\32\2\u018c\u018a\3\2\2")
        buf.write("\2\u018d\u0190\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018f")
        buf.write("\3\2\2\2\u018f\u0191\3\2\2\2\u0190\u018e\3\2\2\2\u0191")
        buf.write("\u01a0\7\6\2\2\u0192\u0193\7\7\2\2\u0193\u0194\7\5\2\2")
        buf.write("\u0194\u0199\5\62\32\2\u0195\u0196\7\7\2\2\u0196\u0198")
        buf.write("\5\62\32\2\u0197\u0195\3\2\2\2\u0198\u019b\3\2\2\2\u0199")
        buf.write("\u0197\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2")
        buf.write("\u019b\u0199\3\2\2\2\u019c\u019d\7\6\2\2\u019d\u019f\3")
        buf.write("\2\2\2\u019e\u0192\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e")
        buf.write("\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a7\3\2\2\2\u01a2")
        buf.write("\u01a0\3\2\2\2\u01a3\u01a7\5&\24\2\u01a4\u01a5\7:\2\2")
        buf.write("\u01a5\u01a7\7\u0090\2\2\u01a6\u0187\3\2\2\2\u01a6\u01a3")
        buf.write("\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\33\3\2\2\2\u01a8\u01ac")
        buf.write("\7r\2\2\u01a9\u01aa\5`\61\2\u01aa\u01ab\7\4\2\2\u01ab")
        buf.write("\u01ad\3\2\2\2\u01ac\u01a9\3\2\2\2\u01ac\u01ad\3\2\2\2")
        buf.write("\u01ad\u01ae\3\2\2\2\u01ae\u01b5\5l\67\2\u01af\u01b0\7")
        buf.write("\b\2\2\u01b0\u01b6\5<\37\2\u01b1\u01b2\7\5\2\2\u01b2\u01b3")
        buf.write("\5<\37\2\u01b3\u01b4\7\6\2\2\u01b4\u01b6\3\2\2\2\u01b5")
        buf.write("\u01af\3\2\2\2\u01b5\u01b1\3\2\2\2\u01b5\u01b6\3\2\2\2")
        buf.write("\u01b6\35\3\2\2\2\u01b7\u01b9\7z\2\2\u01b8\u01ba\7\u0081")
        buf.write("\2\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bc\5n8\2\u01bc\37\3\2\2\2\u01bd\u01c2")
        buf.write("\7\177\2\2\u01be\u01c0\7\u0089\2\2\u01bf\u01c1\5r:\2\u01c0")
        buf.write("\u01bf\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c3\3\2\2\2")
        buf.write("\u01c2\u01be\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c9\3")
        buf.write("\2\2\2\u01c4\u01c6\7\u0088\2\2\u01c5\u01c7\7\u0081\2\2")
        buf.write("\u01c6\u01c5\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c8\3")
        buf.write("\2\2\2\u01c8\u01ca\5n8\2\u01c9\u01c4\3\2\2\2\u01c9\u01ca")
        buf.write("\3\2\2\2\u01ca!\3\2\2\2\u01cb\u01cc\7\u0081\2\2\u01cc")
        buf.write("\u01cd\5n8\2\u01cd#\3\2\2\2\u01ce\u01d0\7\u0095\2\2\u01cf")
        buf.write("\u01d1\7v\2\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1\3\2\2\2")
        buf.write("\u01d1\u01d2\3\2\2\2\u01d2\u01d7\5> \2\u01d3\u01d4\7\7")
        buf.write("\2\2\u01d4\u01d6\5> \2\u01d5\u01d3\3\2\2\2\u01d6\u01d9")
        buf.write("\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8")
        buf.write("\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01ce\3\2\2\2")
        buf.write("\u01da\u01db\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01e7\5")
        buf.write("J&\2\u01dd\u01de\7o\2\2\u01de\u01df\7*\2\2\u01df\u01e4")
        buf.write("\5:\36\2\u01e0\u01e1\7\7\2\2\u01e1\u01e3\5:\36\2\u01e2")
        buf.write("\u01e0\3\2\2\2\u01e3\u01e6\3\2\2\2\u01e4\u01e2\3\2\2\2")
        buf.write("\u01e4\u01e5\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6\u01e4\3")
        buf.write("\2\2\2\u01e7\u01dd\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01ef")
        buf.write("\3\2\2\2\u01e9\u01ea\7d\2\2\u01ea\u01ed\5\62\32\2\u01eb")
        buf.write("\u01ec\t\4\2\2\u01ec\u01ee\5\62\32\2\u01ed\u01eb\3\2\2")
        buf.write("\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2\u01ef\u01e9")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0%\3\2\2\2\u01f1\u01f3")
        buf.write("\7\u0095\2\2\u01f2\u01f4\7v\2\2\u01f3\u01f2\3\2\2\2\u01f3")
        buf.write("\u01f4\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01fa\5> \2\u01f6")
        buf.write("\u01f7\7\7\2\2\u01f7\u01f9\5> \2\u01f8\u01f6\3\2\2\2\u01f9")
        buf.write("\u01fc\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2")
        buf.write("\u01fb\u01fe\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fd\u01f1\3")
        buf.write("\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0205")
        buf.write("\5(\25\2\u0200\u0201\5L\'\2\u0201\u0202\5(\25\2\u0202")
        buf.write("\u0204\3\2\2\2\u0203\u0200\3\2\2\2\u0204\u0207\3\2\2\2")
        buf.write("\u0205\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0212\3")
        buf.write("\2\2\2\u0207\u0205\3\2\2\2\u0208\u0209\7o\2\2\u0209\u020a")
        buf.write("\7*\2\2\u020a\u020f\5:\36\2\u020b\u020c\7\7\2\2\u020c")
        buf.write("\u020e\5:\36\2\u020d\u020b\3\2\2\2\u020e\u0211\3\2\2\2")
        buf.write("\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0213\3")
        buf.write("\2\2\2\u0211\u020f\3\2\2\2\u0212\u0208\3\2\2\2\u0212\u0213")
        buf.write("\3\2\2\2\u0213\u021a\3\2\2\2\u0214\u0215\7d\2\2\u0215")
        buf.write("\u0218\5\62\32\2\u0216\u0217\t\4\2\2\u0217\u0219\5\62")
        buf.write("\32\2\u0218\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b")
        buf.write("\3\2\2\2\u021a\u0214\3\2\2\2\u021a\u021b\3\2\2\2\u021b")
        buf.write("\'\3\2\2\2\u021c\u021e\7\u0082\2\2\u021d\u021f\t\5\2\2")
        buf.write("\u021e\u021d\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0220\3")
        buf.write("\2\2\2\u0220\u0225\5@!\2\u0221\u0222\7\7\2\2\u0222\u0224")
        buf.write("\5@!\2\u0223\u0221\3\2\2\2\u0224\u0227\3\2\2\2\u0225\u0223")
        buf.write("\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0234\3\2\2\2\u0227")
        buf.write("\u0225\3\2\2\2\u0228\u0232\7M\2\2\u0229\u022e\5B\"\2\u022a")
        buf.write("\u022b\7\7\2\2\u022b\u022d\5B\"\2\u022c\u022a\3\2\2\2")
        buf.write("\u022d\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3")
        buf.write("\2\2\2\u022f\u0233\3\2\2\2\u0230\u022e\3\2\2\2\u0231\u0233")
        buf.write("\5D#\2\u0232\u0229\3\2\2\2\u0232\u0231\3\2\2\2\u0233\u0235")
        buf.write("\3\2\2\2\u0234\u0228\3\2\2\2\u0234\u0235\3\2\2\2\u0235")
        buf.write("\u0238\3\2\2\2\u0236\u0237\7\u0094\2\2\u0237\u0239\5\62")
        buf.write("\32\2\u0238\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u0248")
        buf.write("\3\2\2\2\u023a\u023b\7P\2\2\u023b\u023c\7*\2\2\u023c\u0241")
        buf.write("\5\62\32\2\u023d\u023e\7\7\2\2\u023e\u0240\5\62\32\2\u023f")
        buf.write("\u023d\3\2\2\2\u0240\u0243\3\2\2\2\u0241\u023f\3\2\2\2")
        buf.write("\u0241\u0242\3\2\2\2\u0242\u0246\3\2\2\2\u0243\u0241\3")
        buf.write("\2\2\2\u0244\u0245\7Q\2\2\u0245\u0247\5\62\32\2\u0246")
        buf.write("\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0249\3\2\2\2")
        buf.write("\u0248\u023a\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u0267\3")
        buf.write("\2\2\2\u024a\u024b\7\u0090\2\2\u024b\u024c\7\5\2\2\u024c")
        buf.write("\u0251\5\62\32\2\u024d\u024e\7\7\2\2\u024e\u0250\5\62")
        buf.write("\32\2\u024f\u024d\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f")
        buf.write("\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0254\3\2\2\2\u0253")
        buf.write("\u0251\3\2\2\2\u0254\u0263\7\6\2\2\u0255\u0256\7\7\2\2")
        buf.write("\u0256\u0257\7\5\2\2\u0257\u025c\5\62\32\2\u0258\u0259")
        buf.write("\7\7\2\2\u0259\u025b\5\62\32\2\u025a\u0258\3\2\2\2\u025b")
        buf.write("\u025e\3\2\2\2\u025c\u025a\3\2\2\2\u025c\u025d\3\2\2\2")
        buf.write("\u025d\u025f\3\2\2\2\u025e\u025c\3\2\2\2\u025f\u0260\7")
        buf.write("\6\2\2\u0260\u0262\3\2\2\2\u0261\u0255\3\2\2\2\u0262\u0265")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u021c\3\2\2\2")
        buf.write("\u0266\u024a\3\2\2\2\u0267)\3\2\2\2\u0268\u026a\5\66\34")
        buf.write("\2\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u0276\7\u008d\2\2\u026c\u026d\7n\2\2\u026d")
        buf.write("\u0277\7\177\2\2\u026e\u026f\7n\2\2\u026f\u0277\7\33\2")
        buf.write("\2\u0270\u0271\7n\2\2\u0271\u0277\7|\2\2\u0272\u0273\7")
        buf.write("n\2\2\u0273\u0277\7J\2\2\u0274\u0275\7n\2\2\u0275\u0277")
        buf.write("\7S\2\2\u0276\u026c\3\2\2\2\u0276\u026e\3\2\2\2\u0276")
        buf.write("\u0270\3\2\2\2\u0276\u0272\3\2\2\2\u0276\u0274\3\2\2\2")
        buf.write("\u0276\u0277\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279\5")
        buf.write("8\35\2\u0279\u027a\7\u0083\2\2\u027a\u027b\5f\64\2\u027b")
        buf.write("\u027c\7\b\2\2\u027c\u0284\5\62\32\2\u027d\u027e\7\7\2")
        buf.write("\2\u027e\u027f\5f\64\2\u027f\u0280\7\b\2\2\u0280\u0281")
        buf.write("\5\62\32\2\u0281\u0283\3\2\2\2\u0282\u027d\3\2\2\2\u0283")
        buf.write("\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u0289\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u0288\7")
        buf.write("\u0094\2\2\u0288\u028a\5\62\32\2\u0289\u0287\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a+\3\2\2\2\u028b\u028d\5\66\34\2\u028c")
        buf.write("\u028b\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u0299\7\u008d\2\2\u028f\u0290\7n\2\2\u0290\u029a")
        buf.write("\7\177\2\2\u0291\u0292\7n\2\2\u0292\u029a\7\33\2\2\u0293")
        buf.write("\u0294\7n\2\2\u0294\u029a\7|\2\2\u0295\u0296\7n\2\2\u0296")
        buf.write("\u029a\7J\2\2\u0297\u0298\7n\2\2\u0298\u029a\7S\2\2\u0299")
        buf.write("\u028f\3\2\2\2\u0299\u0291\3\2\2\2\u0299\u0293\3\2\2\2")
        buf.write("\u0299\u0295\3\2\2\2\u0299\u0297\3\2\2\2\u0299\u029a\3")
        buf.write("\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\58\35\2\u029c\u029d")
        buf.write("\7\u0083\2\2\u029d\u029e\5f\64\2\u029e\u029f\7\b\2\2\u029f")
        buf.write("\u02a7\5\62\32\2\u02a0\u02a1\7\7\2\2\u02a1\u02a2\5f\64")
        buf.write("\2\u02a2\u02a3\7\b\2\2\u02a3\u02a4\5\62\32\2\u02a4\u02a6")
        buf.write("\3\2\2\2\u02a5\u02a0\3\2\2\2\u02a6\u02a9\3\2\2\2\u02a7")
        buf.write("\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02ac\3\2\2\2")
        buf.write("\u02a9\u02a7\3\2\2\2\u02aa\u02ab\7\u0094\2\2\u02ab\u02ad")
        buf.write("\5\62\32\2\u02ac\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad")
        buf.write("\u02c0\3\2\2\2\u02ae\u02af\7o\2\2\u02af\u02b0\7*\2\2\u02b0")
        buf.write("\u02b5\5:\36\2\u02b1\u02b2\7\7\2\2\u02b2\u02b4\5:\36\2")
        buf.write("\u02b3\u02b1\3\2\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3")
        buf.write("\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b9\3\2\2\2\u02b7\u02b5")
        buf.write("\3\2\2\2\u02b8\u02ae\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write("\u02ba\3\2\2\2\u02ba\u02bb\7d\2\2\u02bb\u02be\5\62\32")
        buf.write("\2\u02bc\u02bd\t\4\2\2\u02bd\u02bf\5\62\32\2\u02be\u02bc")
        buf.write("\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3\2\2\2\u02c0")
        buf.write("\u02b8\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1-\3\2\2\2\u02c2")
        buf.write("\u02c3\7\u008f\2\2\u02c3/\3\2\2\2\u02c4\u02c6\5\\/\2\u02c5")
        buf.write("\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c8\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c8\u02d3\3\2\2\2\u02c9\u02ca\7")
        buf.write("\5\2\2\u02ca\u02cb\5P)\2\u02cb\u02cc\7\6\2\2\u02cc\u02d4")
        buf.write("\3\2\2\2\u02cd\u02ce\7\5\2\2\u02ce\u02cf\5P)\2\u02cf\u02d0")
        buf.write("\7\7\2\2\u02d0\u02d1\5P)\2\u02d1\u02d2\7\6\2\2\u02d2\u02d4")
        buf.write("\3\2\2\2\u02d3\u02c9\3\2\2\2\u02d3\u02cd\3\2\2\2\u02d3")
        buf.write("\u02d4\3\2\2\2\u02d4\61\3\2\2\2\u02d5\u02d6\b\32\1\2\u02d6")
        buf.write("\u0322\5R*\2\u02d7\u0322\7\u0099\2\2\u02d8\u02d9\5`\61")
        buf.write("\2\u02d9\u02da\7\4\2\2\u02da\u02dc\3\2\2\2\u02db\u02d8")
        buf.write("\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd")
        buf.write("\u02de\5b\62\2\u02de\u02df\7\4\2\2\u02df\u02e1\3\2\2\2")
        buf.write("\u02e0\u02db\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e2\3")
        buf.write("\2\2\2\u02e2\u0322\5f\64\2\u02e3\u02e4\5T+\2\u02e4\u02e5")
        buf.write("\5\62\32\27\u02e5\u0322\3\2\2\2\u02e6\u02e7\5^\60\2\u02e7")
        buf.write("\u02f4\7\5\2\2\u02e8\u02ea\7@\2\2\u02e9\u02e8\3\2\2\2")
        buf.write("\u02e9\u02ea\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02f0\5")
        buf.write("\62\32\2\u02ec\u02ed\7\7\2\2\u02ed\u02ef\5\62\32\2\u02ee")
        buf.write("\u02ec\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3\2\2\2")
        buf.write("\u02f0\u02f1\3\2\2\2\u02f1\u02f5\3\2\2\2\u02f2\u02f0\3")
        buf.write("\2\2\2\u02f3\u02f5\7\t\2\2\u02f4\u02e9\3\2\2\2\u02f4\u02f3")
        buf.write("\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write("\u02f7\7\6\2\2\u02f7\u0322\3\2\2\2\u02f8\u02f9\7\5\2\2")
        buf.write("\u02f9\u02fa\5\62\32\2\u02fa\u02fb\7\6\2\2\u02fb\u0322")
        buf.write("\3\2\2\2\u02fc\u02fd\7-\2\2\u02fd\u02fe\7\5\2\2\u02fe")
        buf.write("\u02ff\5\62\32\2\u02ff\u0300\7#\2\2\u0300\u0301\5\60\31")
        buf.write("\2\u0301\u0302\7\6\2\2\u0302\u0322\3\2\2\2\u0303\u0305")
        buf.write("\7h\2\2\u0304\u0303\3\2\2\2\u0304\u0305\3\2\2\2\u0305")
        buf.write("\u0306\3\2\2\2\u0306\u0308\7H\2\2\u0307\u0304\3\2\2\2")
        buf.write("\u0307\u0308\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030a\7")
        buf.write("\5\2\2\u030a\u030b\5&\24\2\u030b\u030c\7\6\2\2\u030c\u0322")
        buf.write("\3\2\2\2\u030d\u030f\7,\2\2\u030e\u0310\5\62\32\2\u030f")
        buf.write("\u030e\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0316\3\2\2\2")
        buf.write("\u0311\u0312\7\u0093\2\2\u0312\u0313\5\62\32\2\u0313\u0314")
        buf.write("\7\u0087\2\2\u0314\u0315\5\62\32\2\u0315\u0317\3\2\2\2")
        buf.write("\u0316\u0311\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0316\3")
        buf.write("\2\2\2\u0318\u0319\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u031b")
        buf.write("\7C\2\2\u031b\u031d\5\62\32\2\u031c\u031a\3\2\2\2\u031c")
        buf.write("\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u031f\7D\2\2")
        buf.write("\u031f\u0322\3\2\2\2\u0320\u0322\5\64\33\2\u0321\u02d5")
        buf.write("\3\2\2\2\u0321\u02d7\3\2\2\2\u0321\u02e0\3\2\2\2\u0321")
        buf.write("\u02e3\3\2\2\2\u0321\u02e6\3\2\2\2\u0321\u02f8\3\2\2\2")
        buf.write("\u0321\u02fc\3\2\2\2\u0321\u0307\3\2\2\2\u0321\u030d\3")
        buf.write("\2\2\2\u0321\u0320\3\2\2\2\u0322\u0387\3\2\2\2\u0323\u0324")
        buf.write("\f\26\2\2\u0324\u0325\7\r\2\2\u0325\u0386\5\62\32\27\u0326")
        buf.write("\u0327\f\25\2\2\u0327\u0328\t\6\2\2\u0328\u0386\5\62\32")
        buf.write("\26\u0329\u032a\f\24\2\2\u032a\u032b\t\7\2\2\u032b\u0386")
        buf.write("\5\62\32\25\u032c\u032d\f\23\2\2\u032d\u032e\t\b\2\2\u032e")
        buf.write("\u0386\5\62\32\24\u032f\u0330\f\22\2\2\u0330\u0331\t\t")
        buf.write("\2\2\u0331\u0386\5\62\32\23\u0332\u033f\f\21\2\2\u0333")
        buf.write("\u0340\7\b\2\2\u0334\u0340\7\30\2\2\u0335\u0340\7\31\2")
        buf.write("\2\u0336\u0340\7\32\2\2\u0337\u0340\7^\2\2\u0338\u0339")
        buf.write("\7^\2\2\u0339\u0340\7h\2\2\u033a\u0340\7U\2\2\u033b\u0340")
        buf.write("\7c\2\2\u033c\u0340\7O\2\2\u033d\u0340\7e\2\2\u033e\u0340")
        buf.write("\7x\2\2\u033f\u0333\3\2\2\2\u033f\u0334\3\2\2\2\u033f")
        buf.write("\u0335\3\2\2\2\u033f\u0336\3\2\2\2\u033f\u0337\3\2\2\2")
        buf.write("\u033f\u0338\3\2\2\2\u033f\u033a\3\2\2\2\u033f\u033b\3")
        buf.write("\2\2\2\u033f\u033c\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u033e")
        buf.write("\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0386\5\62\32\22\u0342")
        buf.write("\u0343\f\20\2\2\u0343\u0344\7\"\2\2\u0344\u0386\5\62\32")
        buf.write("\21\u0345\u0346\f\17\2\2\u0346\u0347\7n\2\2\u0347\u0386")
        buf.write("\5\62\32\20\u0348\u0349\f\b\2\2\u0349\u034b\7^\2\2\u034a")
        buf.write("\u034c\7h\2\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2")
        buf.write("\u034c\u034d\3\2\2\2\u034d\u0386\5\62\32\t\u034e\u0350")
        buf.write("\f\7\2\2\u034f\u0351\7h\2\2\u0350\u034f\3\2\2\2\u0350")
        buf.write("\u0351\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0353\7)\2\2")
        buf.write("\u0353\u0354\5\62\32\2\u0354\u0355\7\"\2\2\u0355\u0356")
        buf.write("\5\62\32\b\u0356\u0386\3\2\2\2\u0357\u0358\f\13\2\2\u0358")
        buf.write("\u0359\7/\2\2\u0359\u0386\5h\65\2\u035a\u035c\f\n\2\2")
        buf.write("\u035b\u035d\7h\2\2\u035c\u035b\3\2\2\2\u035c\u035d\3")
        buf.write("\2\2\2\u035d\u035e\3\2\2\2\u035e\u035f\t\n\2\2\u035f\u0362")
        buf.write("\5\62\32\2\u0360\u0361\7E\2\2\u0361\u0363\5\62\32\2\u0362")
        buf.write("\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0386\3\2\2\2")
        buf.write("\u0364\u0369\f\t\2\2\u0365\u036a\7_\2\2\u0366\u036a\7")
        buf.write("i\2\2\u0367\u0368\7h\2\2\u0368\u036a\7j\2\2\u0369\u0365")
        buf.write("\3\2\2\2\u0369\u0366\3\2\2\2\u0369\u0367\3\2\2\2\u036a")
        buf.write("\u0386\3\2\2\2\u036b\u036d\f\6\2\2\u036c\u036e\7h\2\2")
        buf.write("\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f\3")
        buf.write("\2\2\2\u036f\u0383\7U\2\2\u0370\u037a\7\5\2\2\u0371\u037b")
        buf.write("\5&\24\2\u0372\u0377\5\62\32\2\u0373\u0374\7\7\2\2\u0374")
        buf.write("\u0376\5\62\32\2\u0375\u0373\3\2\2\2\u0376\u0379\3\2\2")
        buf.write("\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037b")
        buf.write("\3\2\2\2\u0379\u0377\3\2\2\2\u037a\u0371\3\2\2\2\u037a")
        buf.write("\u0372\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037c\3\2\2\2")
        buf.write("\u037c\u0384\7\6\2\2\u037d\u037e\5`\61\2\u037e\u037f\7")
        buf.write("\4\2\2\u037f\u0381\3\2\2\2\u0380\u037d\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0384\5b\62\2\u0383")
        buf.write("\u0370\3\2\2\2\u0383\u0380\3\2\2\2\u0384\u0386\3\2\2\2")
        buf.write("\u0385\u0323\3\2\2\2\u0385\u0326\3\2\2\2\u0385\u0329\3")
        buf.write("\2\2\2\u0385\u032c\3\2\2\2\u0385\u032f\3\2\2\2\u0385\u0332")
        buf.write("\3\2\2\2\u0385\u0342\3\2\2\2\u0385\u0345\3\2\2\2\u0385")
        buf.write("\u0348\3\2\2\2\u0385\u034e\3\2\2\2\u0385\u0357\3\2\2\2")
        buf.write("\u0385\u035a\3\2\2\2\u0385\u0364\3\2\2\2\u0385\u036b\3")
        buf.write("\2\2\2\u0386\u0389\3\2\2\2\u0387\u0385\3\2\2\2\u0387\u0388")
        buf.write("\3\2\2\2\u0388\63\3\2\2\2\u0389\u0387\3\2\2\2\u038a\u038b")
        buf.write("\7u\2\2\u038b\u0390\7\5\2\2\u038c\u0391\7S\2\2\u038d\u038e")
        buf.write("\t\13\2\2\u038e\u038f\7\7\2\2\u038f\u0391\5V,\2\u0390")
        buf.write("\u038c\3\2\2\2\u0390\u038d\3\2\2\2\u0391\u0392\3\2\2\2")
        buf.write("\u0392\u0393\7\6\2\2\u0393\65\3\2\2\2\u0394\u0396\7\u0095")
        buf.write("\2\2\u0395\u0397\7v\2\2\u0396\u0395\3\2\2\2\u0396\u0397")
        buf.write("\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u0399\5N(\2\u0399\u039a")
        buf.write("\7#\2\2\u039a\u039b\7\5\2\2\u039b\u039c\5&\24\2\u039c")
        buf.write("\u03a6\7\6\2\2\u039d\u039e\7\7\2\2\u039e\u039f\5N(\2\u039f")
        buf.write("\u03a0\7#\2\2\u03a0\u03a1\7\5\2\2\u03a1\u03a2\5&\24\2")
        buf.write("\u03a2\u03a3\7\6\2\2\u03a3\u03a5\3\2\2\2\u03a4\u039d\3")
        buf.write("\2\2\2\u03a5\u03a8\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7")
        buf.write("\3\2\2\2\u03a7\67\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9\u03aa")
        buf.write("\5`\61\2\u03aa\u03ab\7\4\2\2\u03ab\u03ad\3\2\2\2\u03ac")
        buf.write("\u03a9\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\3\2\2\2")
        buf.write("\u03ae\u03b4\5b\62\2\u03af\u03b0\7W\2\2\u03b0\u03b1\7")
        buf.write("*\2\2\u03b1\u03b5\5j\66\2\u03b2\u03b3\7h\2\2\u03b3\u03b5")
        buf.write("\7W\2\2\u03b4\u03af\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b59\3\2\2\2\u03b6\u03b9\5\62\32\2\u03b7")
        buf.write("\u03b8\7/\2\2\u03b8\u03ba\5h\65\2\u03b9\u03b7\3\2\2\2")
        buf.write("\u03b9\u03ba\3\2\2\2\u03ba\u03bc\3\2\2\2\u03bb\u03bd\t")
        buf.write("\f\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd;")
        buf.write("\3\2\2\2\u03be\u03c2\5P)\2\u03bf\u03c2\5\\/\2\u03c0\u03c2")
        buf.write("\7\u009a\2\2\u03c1\u03be\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1")
        buf.write("\u03c0\3\2\2\2\u03c2=\3\2\2\2\u03c3\u03cf\5b\62\2\u03c4")
        buf.write("\u03c5\7\5\2\2\u03c5\u03ca\5f\64\2\u03c6\u03c7\7\7\2\2")
        buf.write("\u03c7\u03c9\5f\64\2\u03c8\u03c6\3\2\2\2\u03c9\u03cc\3")
        buf.write("\2\2\2\u03ca\u03c8\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd")
        buf.write("\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cd\u03ce\7\6\2\2\u03ce")
        buf.write("\u03d0\3\2\2\2\u03cf\u03c4\3\2\2\2\u03cf\u03d0\3\2\2\2")
        buf.write("\u03d0\u03d1\3\2\2\2\u03d1\u03d2\7#\2\2\u03d2\u03d3\7")
        buf.write("\5\2\2\u03d3\u03d4\5&\24\2\u03d4\u03d5\7\6\2\2\u03d5?")
        buf.write("\3\2\2\2\u03d6\u03e3\7\t\2\2\u03d7\u03d8\5b\62\2\u03d8")
        buf.write("\u03d9\7\4\2\2\u03d9\u03da\7\t\2\2\u03da\u03e3\3\2\2\2")
        buf.write("\u03db\u03e0\5\62\32\2\u03dc\u03de\7#\2\2\u03dd\u03dc")
        buf.write("\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\3\2\2\2\u03df")
        buf.write("\u03e1\5X-\2\u03e0\u03dd\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e3\3\2\2\2\u03e2\u03d6\3\2\2\2\u03e2\u03d7\3\2\2\2")
        buf.write("\u03e2\u03db\3\2\2\2\u03e3A\3\2\2\2\u03e4\u03e5\5`\61")
        buf.write("\2\u03e5\u03e6\7\4\2\2\u03e6\u03e8\3\2\2\2\u03e7\u03e4")
        buf.write("\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9")
        buf.write("\u03ee\5b\62\2\u03ea\u03ec\7#\2\2\u03eb\u03ea\3\2\2\2")
        buf.write("\u03eb\u03ec\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ef\5")
        buf.write("p9\2\u03ee\u03eb\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f5")
        buf.write("\3\2\2\2\u03f0\u03f1\7W\2\2\u03f1\u03f2\7*\2\2\u03f2\u03f6")
        buf.write("\5j\66\2\u03f3\u03f4\7h\2\2\u03f4\u03f6\7W\2\2\u03f5\u03f0")
        buf.write("\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6")
        buf.write("\u0414\3\2\2\2\u03f7\u0401\7\5\2\2\u03f8\u03fd\5B\"\2")
        buf.write("\u03f9\u03fa\7\7\2\2\u03fa\u03fc\5B\"\2\u03fb\u03f9\3")
        buf.write("\2\2\2\u03fc\u03ff\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fe")
        buf.write("\3\2\2\2\u03fe\u0402\3\2\2\2\u03ff\u03fd\3\2\2\2\u0400")
        buf.write("\u0402\5D#\2\u0401\u03f8\3\2\2\2\u0401\u0400\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0408\7\6\2\2\u0404\u0406\7#\2\2")
        buf.write("\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407\3")
        buf.write("\2\2\2\u0407\u0409\5p9\2\u0408\u0405\3\2\2\2\u0408\u0409")
        buf.write("\3\2\2\2\u0409\u0414\3\2\2\2\u040a\u040b\7\5\2\2\u040b")
        buf.write("\u040c\5&\24\2\u040c\u0411\7\6\2\2\u040d\u040f\7#\2\2")
        buf.write("\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410\3")
        buf.write("\2\2\2\u0410\u0412\5p9\2\u0411\u040e\3\2\2\2\u0411\u0412")
        buf.write("\3\2\2\2\u0412\u0414\3\2\2\2\u0413\u03e7\3\2\2\2\u0413")
        buf.write("\u03f7\3\2\2\2\u0413\u040a\3\2\2\2\u0414C\3\2\2\2\u0415")
        buf.write("\u041c\5B\"\2\u0416\u0417\5F$\2\u0417\u0418\5B\"\2\u0418")
        buf.write("\u0419\5H%\2\u0419\u041b\3\2\2\2\u041a\u0416\3\2\2\2\u041b")
        buf.write("\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2")
        buf.write("\u041dE\3\2\2\2\u041e\u041c\3\2\2\2\u041f\u042d\7\7\2")
        buf.write("\2\u0420\u0422\7f\2\2\u0421\u0420\3\2\2\2\u0421\u0422")
        buf.write("\3\2\2\2\u0422\u0429\3\2\2\2\u0423\u0425\7b\2\2\u0424")
        buf.write("\u0426\7p\2\2\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u042a\3\2\2\2\u0427\u042a\7Y\2\2\u0428\u042a\7")
        buf.write("\65\2\2\u0429\u0423\3\2\2\2\u0429\u0427\3\2\2\2\u0429")
        buf.write("\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042b\3\2\2\2")
        buf.write("\u042b\u042d\7`\2\2\u042c\u041f\3\2\2\2\u042c\u0421\3")
        buf.write("\2\2\2\u042dG\3\2\2\2\u042e\u042f\7m\2\2\u042f\u043d\5")
        buf.write("\62\32\2\u0430\u0431\7\u008e\2\2\u0431\u0432\7\5\2\2\u0432")
        buf.write("\u0437\5f\64\2\u0433\u0434\7\7\2\2\u0434\u0436\5f\64\2")
        buf.write("\u0435\u0433\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3")
        buf.write("\2\2\2\u0437\u0438\3\2\2\2\u0438\u043a\3\2\2\2\u0439\u0437")
        buf.write("\3\2\2\2\u043a\u043b\7\6\2\2\u043b\u043d\3\2\2\2\u043c")
        buf.write("\u042e\3\2\2\2\u043c\u0430\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043dI\3\2\2\2\u043e\u0440\7\u0082\2\2\u043f\u0441\t")
        buf.write("\5\2\2\u0440\u043f\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442")
        buf.write("\3\2\2\2\u0442\u0447\5@!\2\u0443\u0444\7\7\2\2\u0444\u0446")
        buf.write("\5@!\2\u0445\u0443\3\2\2\2\u0446\u0449\3\2\2\2\u0447\u0445")
        buf.write("\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0456\3\2\2\2\u0449")
        buf.write("\u0447\3\2\2\2\u044a\u0454\7M\2\2\u044b\u0450\5B\"\2\u044c")
        buf.write("\u044d\7\7\2\2\u044d\u044f\5B\"\2\u044e\u044c\3\2\2\2")
        buf.write("\u044f\u0452\3\2\2\2\u0450\u044e\3\2\2\2\u0450\u0451\3")
        buf.write("\2\2\2\u0451\u0455\3\2\2\2\u0452\u0450\3\2\2\2\u0453\u0455")
        buf.write("\5D#\2\u0454\u044b\3\2\2\2\u0454\u0453\3\2\2\2\u0455\u0457")
        buf.write("\3\2\2\2\u0456\u044a\3\2\2\2\u0456\u0457\3\2\2\2\u0457")
        buf.write("\u045a\3\2\2\2\u0458\u0459\7\u0094\2\2\u0459\u045b\5\62")
        buf.write("\32\2\u045a\u0458\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u046a")
        buf.write("\3\2\2\2\u045c\u045d\7P\2\2\u045d\u045e\7*\2\2\u045e\u0463")
        buf.write("\5\62\32\2\u045f\u0460\7\7\2\2\u0460\u0462\5\62\32\2\u0461")
        buf.write("\u045f\3\2\2\2\u0462\u0465\3\2\2\2\u0463\u0461\3\2\2\2")
        buf.write("\u0463\u0464\3\2\2\2\u0464\u0468\3\2\2\2\u0465\u0463\3")
        buf.write("\2\2\2\u0466\u0467\7Q\2\2\u0467\u0469\5\62\32\2\u0468")
        buf.write("\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046b\3\2\2\2")
        buf.write("\u046a\u045c\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u0489\3")
        buf.write("\2\2\2\u046c\u046d\7\u0090\2\2\u046d\u046e\7\5\2\2\u046e")
        buf.write("\u0473\5\62\32\2\u046f\u0470\7\7\2\2\u0470\u0472\5\62")
        buf.write("\32\2\u0471\u046f\3\2\2\2\u0472\u0475\3\2\2\2\u0473\u0471")
        buf.write("\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2\u0475")
        buf.write("\u0473\3\2\2\2\u0476\u0485\7\6\2\2\u0477\u0478\7\7\2\2")
        buf.write("\u0478\u0479\7\5\2\2\u0479\u047e\5\62\32\2\u047a\u047b")
        buf.write("\7\7\2\2\u047b\u047d\5\62\32\2\u047c\u047a\3\2\2\2\u047d")
        buf.write("\u0480\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047f\3\2\2\2")
        buf.write("\u047f\u0481\3\2\2\2\u0480\u047e\3\2\2\2\u0481\u0482\7")
        buf.write("\6\2\2\u0482\u0484\3\2\2\2\u0483\u0477\3\2\2\2\u0484\u0487")
        buf.write("\3\2\2\2\u0485\u0483\3\2\2\2\u0485\u0486\3\2\2\2\u0486")
        buf.write("\u0489\3\2\2\2\u0487\u0485\3\2\2\2\u0488\u043e\3\2\2\2")
        buf.write("\u0488\u046c\3\2\2\2\u0489K\3\2\2\2\u048a\u0490\7\u008b")
        buf.write("\2\2\u048b\u048c\7\u008b\2\2\u048c\u0490\7\37\2\2\u048d")
        buf.write("\u0490\7\\\2\2\u048e\u0490\7F\2\2\u048f\u048a\3\2\2\2")
        buf.write("\u048f\u048b\3\2\2\2\u048f\u048d\3\2\2\2\u048f\u048e\3")
        buf.write("\2\2\2\u0490M\3\2\2\2\u0491\u049d\5b\62\2\u0492\u0493")
        buf.write("\7\5\2\2\u0493\u0498\5f\64\2\u0494\u0495\7\7\2\2\u0495")
        buf.write("\u0497\5f\64\2\u0496\u0494\3\2\2\2\u0497\u049a\3\2\2\2")
        buf.write("\u0498\u0496\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049b\3")
        buf.write("\2\2\2\u049a\u0498\3\2\2\2\u049b\u049c\7\6\2\2\u049c\u049e")
        buf.write("\3\2\2\2\u049d\u0492\3\2\2\2\u049d\u049e\3\2\2\2\u049e")
        buf.write("O\3\2\2\2\u049f\u04a1\t\7\2\2\u04a0\u049f\3\2\2\2\u04a0")
        buf.write("\u04a1\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a3\7\u0098")
        buf.write("\2\2\u04a3Q\3\2\2\2\u04a4\u04a5\t\r\2\2\u04a5S\3\2\2\2")
        buf.write("\u04a6\u04a7\t\16\2\2\u04a7U\3\2\2\2\u04a8\u04a9\7\u009a")
        buf.write("\2\2\u04a9W\3\2\2\2\u04aa\u04ab\t\17\2\2\u04abY\3\2\2")
        buf.write("\2\u04ac\u04ad\t\20\2\2\u04ad[\3\2\2\2\u04ae\u04af\5t")
        buf.write(";\2\u04af]\3\2\2\2\u04b0\u04b1\5t;\2\u04b1_\3\2\2\2\u04b2")
        buf.write("\u04b3\5t;\2\u04b3a\3\2\2\2\u04b4\u04b5\5t;\2\u04b5c\3")
        buf.write("\2\2\2\u04b6\u04b7\5t;\2\u04b7e\3\2\2\2\u04b8\u04b9\5")
        buf.write("t;\2\u04b9g\3\2\2\2\u04ba\u04bb\5t;\2\u04bbi\3\2\2\2\u04bc")
        buf.write("\u04bd\5t;\2\u04bdk\3\2\2\2\u04be\u04bf\5t;\2\u04bfm\3")
        buf.write("\2\2\2\u04c0\u04c1\5t;\2\u04c1o\3\2\2\2\u04c2\u04c9\7")
        buf.write("\u0097\2\2\u04c3\u04c9\7\u009a\2\2\u04c4\u04c5\7\5\2\2")
        buf.write("\u04c5\u04c6\5p9\2\u04c6\u04c7\7\6\2\2\u04c7\u04c9\3\2")
        buf.write("\2\2\u04c8\u04c2\3\2\2\2\u04c8\u04c3\3\2\2\2\u04c8\u04c4")
        buf.write("\3\2\2\2\u04c9q\3\2\2\2\u04ca\u04cb\5t;\2\u04cbs\3\2\2")
        buf.write("\2\u04cc\u04d4\7\u0097\2\2\u04cd\u04d4\5Z.\2\u04ce\u04d4")
        buf.write("\7\u009a\2\2\u04cf\u04d0\7\5\2\2\u04d0\u04d1\5t;\2\u04d1")
        buf.write("\u04d2\7\6\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04cc\3\2\2\2")
        buf.write("\u04d3\u04cd\3\2\2\2\u04d3\u04ce\3\2\2\2\u04d3\u04cf\3")
        buf.write("\2\2\2\u04d4u\3\2\2\2\u00b0y\u0081\u0088\u008d\u0093\u0099")
        buf.write("\u009b\u00b0\u00b9\u00bd\u00c5\u00c9\u00cb\u00d0\u00d2")
        buf.write("\u00d6\u00dd\u00e0\u00e5\u00e9\u00ee\u00f7\u00fa\u0100")
        buf.write("\u0102\u0105\u010c\u010f\u0116\u011f\u0122\u0128\u012a")
        buf.write("\u012e\u0134\u013b\u013e\u0146\u0150\u0153\u0159\u015b")
        buf.write("\u015e\u0171\u0177\u0180\u0185\u018e\u0199\u01a0\u01a6")
        buf.write("\u01ac\u01b5\u01b9\u01c0\u01c2\u01c6\u01c9\u01d0\u01d7")
        buf.write("\u01da\u01e4\u01e7\u01ed\u01ef\u01f3\u01fa\u01fd\u0205")
        buf.write("\u020f\u0212\u0218\u021a\u021e\u0225\u022e\u0232\u0234")
        buf.write("\u0238\u0241\u0246\u0248\u0251\u025c\u0263\u0266\u0269")
        buf.write("\u0276\u0284\u0289\u028c\u0299\u02a7\u02ac\u02b5\u02b8")
        buf.write("\u02be\u02c0\u02c7\u02d3\u02db\u02e0\u02e9\u02f0\u02f4")
        buf.write("\u0304\u0307\u030f\u0318\u031c\u0321\u033f\u034b\u0350")
        buf.write("\u035c\u0362\u0369\u036d\u0377\u037a\u0380\u0383\u0385")
        buf.write("\u0387\u0390\u0396\u03a6\u03ac\u03b4\u03b9\u03bc\u03c1")
        buf.write("\u03ca\u03cf\u03dd\u03e0\u03e2\u03e7\u03eb\u03ee\u03f5")
        buf.write("\u03fd\u0401\u0405\u0408\u040e\u0411\u0413\u041c\u0421")
        buf.write("\u0425\u0429\u042c\u0437\u043c\u0440\u0447\u0450\u0454")
        buf.write("\u0456\u045a\u0463\u0468\u046a\u0473\u047e\u0485\u0488")
        buf.write("\u048f\u0498\u049d\u04a0\u04c8\u04d3")
        return buf.getvalue()


class SQLiteParser(Parser):
    grammarFileName = "SQLite.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='",
                    "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'",
                    "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='",
                    "'=='", "'!='", "'<>'"]

    symbolicNames = ["<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR",
                     "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE",
                     "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE",
                     "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2",
                     "K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL",
                     "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC",
                     "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN",
                     "K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST",
                     "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT",
                     "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE",
                     "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE",
                     "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE",
                     "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH",
                     "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE",
                     "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN",
                     "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING",
                     "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX",
                     "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT",
                     "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL",
                     "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT",
                     "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL",
                     "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER",
                     "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY",
                     "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP",
                     "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE",
                     "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT",
                     "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY",
                     "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION",
                     "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES",
                     "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH",
                     "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER",
                     "STRING_LITERAL", "BLOB_LITERAL", "SPACES", "UNEXPECTED_CHAR"]

    RULE_parse = 0
    RULE_sql_stmt_list = 1
    RULE_sql_stmt = 2
    RULE_analyze_stmt = 3
    RULE_attach_stmt = 4
    RULE_begin_stmt = 5
    RULE_commit_stmt = 6
    RULE_compound_select_stmt = 7
    RULE_delete_stmt = 8
    RULE_delete_stmt_limited = 9
    RULE_detach_stmt = 10
    RULE_factored_select_stmt = 11
    RULE_insert_stmt = 12
    RULE_pragma_stmt = 13
    RULE_release_stmt = 14
    RULE_rollback_stmt = 15
    RULE_savepoint_stmt = 16
    RULE_simple_select_stmt = 17
    RULE_select_stmt = 18
    RULE_select_or_values = 19
    RULE_update_stmt = 20
    RULE_update_stmt_limited = 21
    RULE_vacuum_stmt = 22
    RULE_type_name = 23
    RULE_expr = 24
    RULE_raise_function = 25
    RULE_with_clause = 26
    RULE_qualified_table_name = 27
    RULE_ordering_term = 28
    RULE_pragma_value = 29
    RULE_common_table_expression = 30
    RULE_result_column = 31
    RULE_table_or_subquery = 32
    RULE_join_clause = 33
    RULE_join_operator = 34
    RULE_join_constraint = 35
    RULE_select_core = 36
    RULE_compound_operator = 37
    RULE_cte_table_name = 38
    RULE_signed_number = 39
    RULE_literal_value = 40
    RULE_unary_operator = 41
    RULE_error_message = 42
    RULE_column_alias = 43
    RULE_keyword = 44
    RULE_name = 45
    RULE_function_name = 46
    RULE_database_name = 47
    RULE_table_name = 48
    RULE_table_or_index_name = 49
    RULE_column_name = 50
    RULE_collation_name = 51
    RULE_index_name = 52
    RULE_pragma_name = 53
    RULE_savepoint_name = 54
    RULE_table_alias = 55
    RULE_transaction_name = 56
    RULE_any_name = 57

    ruleNames = ["parse", "sql_stmt_list", "sql_stmt", "analyze_stmt",
                 "attach_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt",
                 "delete_stmt", "delete_stmt_limited", "detach_stmt",
                 "factored_select_stmt", "insert_stmt", "pragma_stmt",
                 "release_stmt", "rollback_stmt", "savepoint_stmt", "simple_select_stmt",
                 "select_stmt", "select_or_values", "update_stmt", "update_stmt_limited",
                 "vacuum_stmt", "type_name", "expr", "raise_function",
                 "with_clause", "qualified_table_name", "ordering_term",
                 "pragma_value", "common_table_expression", "result_column",
                 "table_or_subquery", "join_clause", "join_operator",
                 "join_constraint", "select_core", "compound_operator",
                 "cte_table_name", "signed_number", "literal_value", "unary_operator",
                 "error_message", "column_alias", "keyword", "name", "function_name",
                 "database_name", "table_name", "table_or_index_name",
                 "column_name", "collation_name", "index_name", "pragma_name",
                 "savepoint_name", "table_alias", "transaction_name",
                 "any_name"]

    EOF = Token.EOF
    SCOL = 1
    DOT = 2
    OPEN_PAR = 3
    CLOSE_PAR = 4
    COMMA = 5
    ASSIGN = 6
    STAR = 7
    PLUS = 8
    MINUS = 9
    TILDE = 10
    PIPE2 = 11
    DIV = 12
    MOD = 13
    LT2 = 14
    GT2 = 15
    AMP = 16
    PIPE = 17
    LT = 18
    LT_EQ = 19
    GT = 20
    GT_EQ = 21
    EQ = 22
    NOT_EQ1 = 23
    NOT_EQ2 = 24
    K_ABORT = 25
    K_ACTION = 26
    K_ADD = 27
    K_AFTER = 28
    K_ALL = 29
    K_ALTER = 30
    K_ANALYZE = 31
    K_AND = 32
    K_AS = 33
    K_ASC = 34
    K_ATTACH = 35
    K_AUTOINCREMENT = 36
    K_BEFORE = 37
    K_BEGIN = 38
    K_BETWEEN = 39
    K_BY = 40
    K_CASCADE = 41
    K_CASE = 42
    K_CAST = 43
    K_CHECK = 44
    K_COLLATE = 45
    K_COLUMN = 46
    K_COMMIT = 47
    K_CONFLICT = 48
    K_CONSTRAINT = 49
    K_CREATE = 50
    K_CROSS = 51
    K_CURRENT_DATE = 52
    K_CURRENT_TIME = 53
    K_CURRENT_TIMESTAMP = 54
    K_DATABASE = 55
    K_DEFAULT = 56
    K_DEFERRABLE = 57
    K_DEFERRED = 58
    K_DELETE = 59
    K_DESC = 60
    K_DETACH = 61
    K_DISTINCT = 62
    K_DROP = 63
    K_EACH = 64
    K_ELSE = 65
    K_END = 66
    K_ESCAPE = 67
    K_EXCEPT = 68
    K_EXCLUSIVE = 69
    K_EXISTS = 70
    K_EXPLAIN = 71
    K_FAIL = 72
    K_FOR = 73
    K_FOREIGN = 74
    K_FROM = 75
    K_FULL = 76
    K_GLOB = 77
    K_GROUP = 78
    K_HAVING = 79
    K_IF = 80
    K_IGNORE = 81
    K_IMMEDIATE = 82
    K_IN = 83
    K_INDEX = 84
    K_INDEXED = 85
    K_INITIALLY = 86
    K_INNER = 87
    K_INSERT = 88
    K_INSTEAD = 89
    K_INTERSECT = 90
    K_INTO = 91
    K_IS = 92
    K_ISNULL = 93
    K_JOIN = 94
    K_KEY = 95
    K_LEFT = 96
    K_LIKE = 97
    K_LIMIT = 98
    K_MATCH = 99
    K_NATURAL = 100
    K_NO = 101
    K_NOT = 102
    K_NOTNULL = 103
    K_NULL = 104
    K_OF = 105
    K_OFFSET = 106
    K_ON = 107
    K_OR = 108
    K_ORDER = 109
    K_OUTER = 110
    K_PLAN = 111
    K_PRAGMA = 112
    K_PRIMARY = 113
    K_QUERY = 114
    K_RAISE = 115
    K_RECURSIVE = 116
    K_REFERENCES = 117
    K_REGEXP = 118
    K_REINDEX = 119
    K_RELEASE = 120
    K_RENAME = 121
    K_REPLACE = 122
    K_RESTRICT = 123
    K_RIGHT = 124
    K_ROLLBACK = 125
    K_ROW = 126
    K_SAVEPOINT = 127
    K_SELECT = 128
    K_SET = 129
    K_TABLE = 130
    K_TEMP = 131
    K_TEMPORARY = 132
    K_THEN = 133
    K_TO = 134
    K_TRANSACTION = 135
    K_TRIGGER = 136
    K_UNION = 137
    K_UNIQUE = 138
    K_UPDATE = 139
    K_USING = 140
    K_VACUUM = 141
    K_VALUES = 142
    K_VIEW = 143
    K_VIRTUAL = 144
    K_WHEN = 145
    K_WHERE = 146
    K_WITH = 147
    K_WITHOUT = 148
    IDENTIFIER = 149
    NUMERIC_LITERAL = 150
    BIND_PARAMETER = 151
    STRING_LITERAL = 152
    BLOB_LITERAL = 153
    SPACES = 154
    UNEXPECTED_CHAR = 155

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParse"):
                listener.enterParse(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParse"):
                listener.exitParse(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParse"):
                return visitor.visitParse(self)
            else:
                return visitor.visitChildren(self)

    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << SQLiteParser.SCOL) | (1 << SQLiteParser.K_ANALYZE) | (1 << SQLiteParser.K_ATTACH) | (
                    1 << SQLiteParser.K_BEGIN) | (1 << SQLiteParser.K_COMMIT) | (1 << SQLiteParser.K_DELETE) | (
                            1 << SQLiteParser.K_DETACH))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                    (1 << (_la - 66)) & ((1 << (SQLiteParser.K_END - 66)) | (1 << (SQLiteParser.K_EXPLAIN - 66)) | (
                    1 << (SQLiteParser.K_INSERT - 66)) | (1 << (SQLiteParser.K_PRAGMA - 66)) | (
                                                 1 << (SQLiteParser.K_RELEASE - 66)) | (
                                                 1 << (SQLiteParser.K_REPLACE - 66)) | (
                                                 1 << (SQLiteParser.K_ROLLBACK - 66)) | (
                                                 1 << (SQLiteParser.K_SAVEPOINT - 66)) | (
                                                 1 << (SQLiteParser.K_SELECT - 66)))) != 0) or (
                    (((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & (
                    (1 << (SQLiteParser.K_UPDATE - 139)) | (1 << (SQLiteParser.K_VACUUM - 139)) | (
                    1 << (SQLiteParser.K_VALUES - 139)) | (1 << (SQLiteParser.K_WITH - 139)))) != 0):
                self.state = 116
                self.sql_stmt_list()
                self.state = 121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 122
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext, i)

        def SCOL(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSql_stmt_list"):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSql_stmt_list"):
                listener.exitSql_stmt_list(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSql_stmt_list"):
                return visitor.visitSql_stmt_list(self)
            else:
                return visitor.visitChildren(self)

    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.SCOL:
                self.state = 124
                self.match(SQLiteParser.SCOL)
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 130
            self.sql_stmt()
            self.state = 139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 131
                        self.match(SQLiteParser.SCOL)
                        self.state = 134
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == SQLiteParser.SCOL):
                            break

                    self.state = 136
                    self.sql_stmt()
                self.state = 141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)

            self.state = 145
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 142
                    self.match(SQLiteParser.SCOL)
                self.state = 147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext, 0)

        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext, 0)

        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext, 0)

        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext, 0)

        def compound_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Compound_select_stmtContext, 0)

        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext, 0)

        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext, 0)

        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext, 0)

        def factored_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Factored_select_stmtContext, 0)

        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext, 0)

        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext, 0)

        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext, 0)

        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext, 0)

        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext, 0)

        def simple_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_select_stmtContext, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext, 0)

        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext, 0)

        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSql_stmt"):
                listener.enterSql_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSql_stmt"):
                listener.exitSql_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSql_stmt"):
                return visitor.visitSql_stmt(self)
            else:
                return visitor.visitChildren(self)

    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_EXPLAIN:
                self.state = 148
                self.match(SQLiteParser.K_EXPLAIN)
                self.state = 151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_QUERY:
                    self.state = 149
                    self.match(SQLiteParser.K_QUERY)
                    self.state = 150
                    self.match(SQLiteParser.K_PLAN)

            self.state = 174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
            if la_ == 1:
                self.state = 155
                self.analyze_stmt()
                pass

            elif la_ == 2:
                self.state = 156
                self.attach_stmt()
                pass

            elif la_ == 3:
                self.state = 157
                self.begin_stmt()
                pass

            elif la_ == 4:
                self.state = 158
                self.commit_stmt()
                pass

            elif la_ == 5:
                self.state = 159
                self.compound_select_stmt()
                pass

            elif la_ == 6:
                self.state = 160
                self.delete_stmt()
                pass

            elif la_ == 7:
                self.state = 161
                self.delete_stmt_limited()
                pass

            elif la_ == 8:
                self.state = 162
                self.detach_stmt()
                pass

            elif la_ == 9:
                self.state = 163
                self.factored_select_stmt()
                pass

            elif la_ == 10:
                self.state = 164
                self.insert_stmt()
                pass

            elif la_ == 11:
                self.state = 165
                self.pragma_stmt()
                pass

            elif la_ == 12:
                self.state = 166
                self.release_stmt()
                pass

            elif la_ == 13:
                self.state = 167
                self.rollback_stmt()
                pass

            elif la_ == 14:
                self.state = 168
                self.savepoint_stmt()
                pass

            elif la_ == 15:
                self.state = 169
                self.simple_select_stmt()
                pass

            elif la_ == 16:
                self.state = 170
                self.select_stmt()
                pass

            elif la_ == 17:
                self.state = 171
                self.update_stmt()
                pass

            elif la_ == 18:
                self.state = 172
                self.update_stmt_limited()
                pass

            elif la_ == 19:
                self.state = 173
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext, 0)

        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnalyze_stmt"):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnalyze_stmt"):
                listener.exitAnalyze_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnalyze_stmt"):
                return visitor.visitAnalyze_stmt(self)
            else:
                return visitor.visitChildren(self)

    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.match(SQLiteParser.K_ANALYZE)
            self.state = 183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
            if la_ == 1:
                self.state = 177
                self.database_name()

            elif la_ == 2:
                self.state = 178
                self.table_or_index_name()

            elif la_ == 3:
                self.state = 179
                self.database_name()
                self.state = 180
                self.match(SQLiteParser.DOT)
                self.state = 181
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttach_stmt"):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttach_stmt"):
                listener.exitAttach_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAttach_stmt"):
                return visitor.visitAttach_stmt(self)
            else:
                return visitor.visitChildren(self)

    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.match(SQLiteParser.K_ATTACH)
            self.state = 187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.state = 186
                self.match(SQLiteParser.K_DATABASE)

            self.state = 189
            self.expr(0)
            self.state = 190
            self.match(SQLiteParser.K_AS)
            self.state = 191
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBegin_stmt"):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBegin_stmt"):
                listener.exitBegin_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBegin_stmt"):
                return visitor.visitBegin_stmt(self)
            else:
                return visitor.visitChildren(self)

    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_begin_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.match(SQLiteParser.K_BEGIN)
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & (
                    (1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (
                    1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0):
                self.state = 194
                _la = self._input.LA(1)
                if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & (
                        (1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (
                        1 << (SQLiteParser.K_IMMEDIATE - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TRANSACTION:
                self.state = 197
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
                if la_ == 1:
                    self.state = 198
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCommit_stmt"):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCommit_stmt"):
                listener.exitCommit_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCommit_stmt"):
                return visitor.visitCommit_stmt(self)
            else:
                return visitor.visitChildren(self)

    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_commit_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            _la = self._input.LA(1)
            if not (_la == SQLiteParser.K_COMMIT or _la == SQLiteParser.K_END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TRANSACTION:
                self.state = 204
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                if la_ == 1:
                    self.state = 205
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext, i)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext, i)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext, i)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_UNION(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UNION)
            else:
                return self.getToken(SQLiteParser.K_UNION, i)

        def K_INTERSECT(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_INTERSECT)
            else:
                return self.getToken(SQLiteParser.K_INTERSECT, i)

        def K_EXCEPT(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_EXCEPT)
            else:
                return self.getToken(SQLiteParser.K_EXCEPT, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ALL(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ALL)
            else:
                return self.getToken(SQLiteParser.K_ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompound_select_stmt"):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompound_select_stmt"):
                listener.exitCompound_select_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompound_select_stmt"):
                return visitor.visitCompound_select_stmt(self)
            else:
                return visitor.visitChildren(self)

    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_compound_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 210
                self.match(SQLiteParser.K_WITH)
                self.state = 212
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                if la_ == 1:
                    self.state = 211
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 214
                self.common_table_expression()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 215
                    self.match(SQLiteParser.COMMA)
                    self.state = 216
                    self.common_table_expression()
                    self.state = 221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 224
            self.select_core()
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 231
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_UNION]:
                    self.state = 225
                    self.match(SQLiteParser.K_UNION)
                    self.state = 227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_ALL:
                        self.state = 226
                        self.match(SQLiteParser.K_ALL)

                    pass
                elif token in [SQLiteParser.K_INTERSECT]:
                    self.state = 229
                    self.match(SQLiteParser.K_INTERSECT)
                    pass
                elif token in [SQLiteParser.K_EXCEPT]:
                    self.state = 230
                    self.match(SQLiteParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 233
                self.select_core()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.K_EXCEPT or _la == SQLiteParser.K_INTERSECT or _la == SQLiteParser.K_UNION):
                    break

            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 238
                self.match(SQLiteParser.K_ORDER)
                self.state = 239
                self.match(SQLiteParser.K_BY)
                self.state = 240
                self.ordering_term()
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 241
                    self.match(SQLiteParser.COMMA)
                    self.state = 242
                    self.ordering_term()
                    self.state = 247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 250
                self.match(SQLiteParser.K_LIMIT)
                self.state = 251
                self.expr(0)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET:
                    self.state = 252
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 253
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDelete_stmt"):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDelete_stmt"):
                listener.exitDelete_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDelete_stmt"):
                return visitor.visitDelete_stmt(self)
            else:
                return visitor.visitChildren(self)

    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_delete_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 258
                self.with_clause()

            self.state = 261
            self.match(SQLiteParser.K_DELETE)
            self.state = 262
            self.match(SQLiteParser.K_FROM)
            self.state = 263
            self.qualified_table_name()
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 264
                self.match(SQLiteParser.K_WHERE)
                self.state = 265
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDelete_stmt_limited"):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDelete_stmt_limited"):
                listener.exitDelete_stmt_limited(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDelete_stmt_limited"):
                return visitor.visitDelete_stmt_limited(self)
            else:
                return visitor.visitChildren(self)

    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_delete_stmt_limited)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 268
                self.with_clause()

            self.state = 271
            self.match(SQLiteParser.K_DELETE)
            self.state = 272
            self.match(SQLiteParser.K_FROM)
            self.state = 273
            self.qualified_table_name()
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 274
                self.match(SQLiteParser.K_WHERE)
                self.state = 275
                self.expr(0)

            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT or _la == SQLiteParser.K_ORDER:
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_ORDER:
                    self.state = 278
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 279
                    self.match(SQLiteParser.K_BY)
                    self.state = 280
                    self.ordering_term()
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 281
                        self.match(SQLiteParser.COMMA)
                        self.state = 282
                        self.ordering_term()
                        self.state = 287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 290
                self.match(SQLiteParser.K_LIMIT)
                self.state = 291
                self.expr(0)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET:
                    self.state = 292
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 293
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDetach_stmt"):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDetach_stmt"):
                listener.exitDetach_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDetach_stmt"):
                return visitor.visitDetach_stmt(self)
            else:
                return visitor.visitChildren(self)

    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(SQLiteParser.K_DETACH)
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
            if la_ == 1:
                self.state = 299
                self.match(SQLiteParser.K_DATABASE)

            self.state = 302
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext, i)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext, i)

        def compound_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext, i)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext, i)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactored_select_stmt"):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactored_select_stmt"):
                listener.exitFactored_select_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFactored_select_stmt"):
                return visitor.visitFactored_select_stmt(self)
            else:
                return visitor.visitChildren(self)

    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_factored_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 304
                self.match(SQLiteParser.K_WITH)
                self.state = 306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
                if la_ == 1:
                    self.state = 305
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 308
                self.common_table_expression()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 309
                    self.match(SQLiteParser.COMMA)
                    self.state = 310
                    self.common_table_expression()
                    self.state = 315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 318
            self.select_core()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.K_EXCEPT or _la == SQLiteParser.K_INTERSECT or _la == SQLiteParser.K_UNION:
                self.state = 319
                self.compound_operator()
                self.state = 320
                self.select_core()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 327
                self.match(SQLiteParser.K_ORDER)
                self.state = 328
                self.match(SQLiteParser.K_BY)
                self.state = 329
                self.ordering_term()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 330
                    self.match(SQLiteParser.COMMA)
                    self.state = 331
                    self.ordering_term()
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 339
                self.match(SQLiteParser.K_LIMIT)
                self.state = 340
                self.expr(0)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET:
                    self.state = 341
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 342
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def CLOSE_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsert_stmt"):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsert_stmt"):
                listener.exitInsert_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInsert_stmt"):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)

    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_insert_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 347
                self.with_clause()

            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                self.state = 350
                self.match(SQLiteParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 351
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 352
                self.match(SQLiteParser.K_INSERT)
                self.state = 353
                self.match(SQLiteParser.K_OR)
                self.state = 354
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 355
                self.match(SQLiteParser.K_INSERT)
                self.state = 356
                self.match(SQLiteParser.K_OR)
                self.state = 357
                self.match(SQLiteParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 358
                self.match(SQLiteParser.K_INSERT)
                self.state = 359
                self.match(SQLiteParser.K_OR)
                self.state = 360
                self.match(SQLiteParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 361
                self.match(SQLiteParser.K_INSERT)
                self.state = 362
                self.match(SQLiteParser.K_OR)
                self.state = 363
                self.match(SQLiteParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 364
                self.match(SQLiteParser.K_INSERT)
                self.state = 365
                self.match(SQLiteParser.K_OR)
                self.state = 366
                self.match(SQLiteParser.K_IGNORE)
                pass

            self.state = 369
            self.match(SQLiteParser.K_INTO)
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
            if la_ == 1:
                self.state = 370
                self.database_name()
                self.state = 371
                self.match(SQLiteParser.DOT)

            self.state = 375
            self.table_name()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 376
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 377
                self.column_name()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 378
                    self.match(SQLiteParser.COMMA)
                    self.state = 379
                    self.column_name()
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 385
                self.match(SQLiteParser.CLOSE_PAR)

            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.state = 389
                self.match(SQLiteParser.K_VALUES)
                self.state = 390
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 391
                self.expr(0)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 392
                    self.match(SQLiteParser.COMMA)
                    self.state = 393
                    self.expr(0)
                    self.state = 398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 399
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 400
                    self.match(SQLiteParser.COMMA)
                    self.state = 401
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 402
                    self.expr(0)
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 403
                        self.match(SQLiteParser.COMMA)
                        self.state = 404
                        self.expr(0)
                        self.state = 409
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 410
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 417
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 418
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 419
                self.match(SQLiteParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragma_stmt"):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragma_stmt"):
                listener.exitPragma_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPragma_stmt"):
                return visitor.visitPragma_stmt(self)
            else:
                return visitor.visitChildren(self)

    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(SQLiteParser.K_PRAGMA)
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
            if la_ == 1:
                self.state = 423
                self.database_name()
                self.state = 424
                self.match(SQLiteParser.DOT)

            self.state = 428
            self.pragma_name()
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 429
                self.match(SQLiteParser.ASSIGN)
                self.state = 430
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 431
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 432
                self.pragma_value()
                self.state = 433
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH,
                           SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH,
                           SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_PRAGMA,
                           SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK,
                           SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UPDATE,
                           SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelease_stmt"):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelease_stmt"):
                listener.exitRelease_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelease_stmt"):
                return visitor.visitRelease_stmt(self)
            else:
                return visitor.visitChildren(self)

    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(SQLiteParser.K_RELEASE)
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 438
                self.match(SQLiteParser.K_SAVEPOINT)

            self.state = 441
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRollback_stmt"):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRollback_stmt"):
                listener.exitRollback_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRollback_stmt"):
                return visitor.visitRollback_stmt(self)
            else:
                return visitor.visitChildren(self)

    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_rollback_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(SQLiteParser.K_ROLLBACK)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TRANSACTION:
                self.state = 444
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.transaction_name()

            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TO:
                self.state = 450
                self.match(SQLiteParser.K_TO)
                self.state = 452
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
                if la_ == 1:
                    self.state = 451
                    self.match(SQLiteParser.K_SAVEPOINT)

                self.state = 454
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSavepoint_stmt"):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSavepoint_stmt"):
                listener.exitSavepoint_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSavepoint_stmt"):
                return visitor.visitSavepoint_stmt(self)
            else:
                return visitor.visitChildren(self)

    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(SQLiteParser.K_SAVEPOINT)
            self.state = 458
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext, i)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext, i)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_select_stmt"):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_select_stmt"):
                listener.exitSimple_select_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_select_stmt"):
                return visitor.visitSimple_select_stmt(self)
            else:
                return visitor.visitChildren(self)

    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_simple_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 460
                self.match(SQLiteParser.K_WITH)
                self.state = 462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                if la_ == 1:
                    self.state = 461
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 464
                self.common_table_expression()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 465
                    self.match(SQLiteParser.COMMA)
                    self.state = 466
                    self.common_table_expression()
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 474
            self.select_core()
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 475
                self.match(SQLiteParser.K_ORDER)
                self.state = 476
                self.match(SQLiteParser.K_BY)
                self.state = 477
                self.ordering_term()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 478
                    self.match(SQLiteParser.COMMA)
                    self.state = 479
                    self.ordering_term()
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 487
                self.match(SQLiteParser.K_LIMIT)
                self.state = 488
                self.expr(0)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET:
                    self.state = 489
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 490
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_or_valuesContext, i)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext, i)

        def compound_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext, i)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext, i)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelect_stmt"):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelect_stmt"):
                listener.exitSelect_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelect_stmt"):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)

    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 495
                self.match(SQLiteParser.K_WITH)
                self.state = 497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
                if la_ == 1:
                    self.state = 496
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 499
                self.common_table_expression()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 500
                    self.match(SQLiteParser.COMMA)
                    self.state = 501
                    self.common_table_expression()
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 509
            self.select_or_values()
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.K_EXCEPT or _la == SQLiteParser.K_INTERSECT or _la == SQLiteParser.K_UNION:
                self.state = 510
                self.compound_operator()
                self.state = 511
                self.select_or_values()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 518
                self.match(SQLiteParser.K_ORDER)
                self.state = 519
                self.match(SQLiteParser.K_BY)
                self.state = 520
                self.ordering_term()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 521
                    self.match(SQLiteParser.COMMA)
                    self.state = 522
                    self.ordering_term()
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 530
                self.match(SQLiteParser.K_LIMIT)
                self.state = 531
                self.expr(0)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET:
                    self.state = 532
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 533
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext, i)

        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_or_values

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelect_or_values"):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelect_or_values"):
                listener.exitSelect_or_values(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelect_or_values"):
                return visitor.visitSelect_or_values(self)
            else:
                return visitor.visitChildren(self)

    def select_or_values(self):

        localctx = SQLiteParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_select_or_values)
        self._la = 0  # Token type
        try:
            self.state = 612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self.match(SQLiteParser.K_SELECT)
                self.state = 540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
                if la_ == 1:
                    self.state = 539
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.K_ALL or _la == SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 542
                self.result_column()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 543
                    self.match(SQLiteParser.COMMA)
                    self.state = 544
                    self.result_column()
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_FROM:
                    self.state = 550
                    self.match(SQLiteParser.K_FROM)
                    self.state = 560
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                    if la_ == 1:
                        self.state = 551
                        self.table_or_subquery()
                        self.state = 556
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == SQLiteParser.COMMA:
                            self.state = 552
                            self.match(SQLiteParser.COMMA)
                            self.state = 553
                            self.table_or_subquery()
                            self.state = 558
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 559
                        self.join_clause()
                        pass

                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_WHERE:
                    self.state = 564
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 565
                    self.expr(0)

                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_GROUP:
                    self.state = 568
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 569
                    self.match(SQLiteParser.K_BY)
                    self.state = 570
                    self.expr(0)
                    self.state = 575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 571
                        self.match(SQLiteParser.COMMA)
                        self.state = 572
                        self.expr(0)
                        self.state = 577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_HAVING:
                        self.state = 578
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 579
                        self.expr(0)

                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.match(SQLiteParser.K_VALUES)
                self.state = 585
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 586
                self.expr(0)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 587
                    self.match(SQLiteParser.COMMA)
                    self.state = 588
                    self.expr(0)
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 594
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 595
                    self.match(SQLiteParser.COMMA)
                    self.state = 596
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 597
                    self.expr(0)
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 598
                        self.match(SQLiteParser.COMMA)
                        self.state = 599
                        self.expr(0)
                        self.state = 604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 605
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUpdate_stmt"):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUpdate_stmt"):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUpdate_stmt"):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)

    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_update_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 614
                self.with_clause()

            self.state = 617
            self.match(SQLiteParser.K_UPDATE)
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 87, self._ctx)
            if la_ == 1:
                self.state = 618
                self.match(SQLiteParser.K_OR)
                self.state = 619
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 620
                self.match(SQLiteParser.K_OR)
                self.state = 621
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 622
                self.match(SQLiteParser.K_OR)
                self.state = 623
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 624
                self.match(SQLiteParser.K_OR)
                self.state = 625
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 626
                self.match(SQLiteParser.K_OR)
                self.state = 627
                self.match(SQLiteParser.K_IGNORE)

            self.state = 630
            self.qualified_table_name()
            self.state = 631
            self.match(SQLiteParser.K_SET)
            self.state = 632
            self.column_name()
            self.state = 633
            self.match(SQLiteParser.ASSIGN)
            self.state = 634
            self.expr(0)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 635
                self.match(SQLiteParser.COMMA)
                self.state = 636
                self.column_name()
                self.state = 637
                self.match(SQLiteParser.ASSIGN)
                self.state = 638
                self.expr(0)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 645
                self.match(SQLiteParser.K_WHERE)
                self.state = 646
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def ASSIGN(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUpdate_stmt_limited"):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUpdate_stmt_limited"):
                listener.exitUpdate_stmt_limited(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUpdate_stmt_limited"):
                return visitor.visitUpdate_stmt_limited(self)
            else:
                return visitor.visitChildren(self)

    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_update_stmt_limited)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 649
                self.with_clause()

            self.state = 652
            self.match(SQLiteParser.K_UPDATE)
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
            if la_ == 1:
                self.state = 653
                self.match(SQLiteParser.K_OR)
                self.state = 654
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 655
                self.match(SQLiteParser.K_OR)
                self.state = 656
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 657
                self.match(SQLiteParser.K_OR)
                self.state = 658
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 659
                self.match(SQLiteParser.K_OR)
                self.state = 660
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 661
                self.match(SQLiteParser.K_OR)
                self.state = 662
                self.match(SQLiteParser.K_IGNORE)

            self.state = 665
            self.qualified_table_name()
            self.state = 666
            self.match(SQLiteParser.K_SET)
            self.state = 667
            self.column_name()
            self.state = 668
            self.match(SQLiteParser.ASSIGN)
            self.state = 669
            self.expr(0)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 670
                self.match(SQLiteParser.COMMA)
                self.state = 671
                self.column_name()
                self.state = 672
                self.match(SQLiteParser.ASSIGN)
                self.state = 673
                self.expr(0)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 680
                self.match(SQLiteParser.K_WHERE)
                self.state = 681
                self.expr(0)

            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT or _la == SQLiteParser.K_ORDER:
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_ORDER:
                    self.state = 684
                    self.match(SQLiteParser.K_ORDER)
                    self.state = 685
                    self.match(SQLiteParser.K_BY)
                    self.state = 686
                    self.ordering_term()
                    self.state = 691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 687
                        self.match(SQLiteParser.COMMA)
                        self.state = 688
                        self.ordering_term()
                        self.state = 693
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 696
                self.match(SQLiteParser.K_LIMIT)
                self.state = 697
                self.expr(0)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET:
                    self.state = 698
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 699
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVacuum_stmt"):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVacuum_stmt"):
                listener.exitVacuum_stmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVacuum_stmt"):
                return visitor.visitVacuum_stmt(self)
            else:
                return visitor.visitChildren(self)

    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(SQLiteParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext, i)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext, i)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_name"):
                listener.enterType_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_name"):
                listener.exitType_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitType_name"):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)

    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            _alt = 1 + 1
            while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1 + 1:
                    self.state = 706
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 98, self._ctx)

            self.state = 721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
            if la_ == 1:
                self.state = 711
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 712
                self.signed_number()
                self.state = 713
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 715
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 716
                self.signed_number()
                self.state = 717
                self.match(SQLiteParser.COMMA)
                self.state = 718
                self.signed_number()
                self.state = 719
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext, 0)

        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_WHEN(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_WHEN)
            else:
                return self.getToken(SQLiteParser.K_WHEN, i)

        def K_THEN(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_THEN)
            else:
                return self.getToken(SQLiteParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext, 0)

        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr"):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)

    def expr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_expr, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
            if la_ == 1:
                self.state = 724
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 725
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                if la_ == 1:
                    self.state = 729
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
                    if la_ == 1:
                        self.state = 726
                        self.database_name()
                        self.state = 727
                        self.match(SQLiteParser.DOT)

                    self.state = 731
                    self.table_name()
                    self.state = 732
                    self.match(SQLiteParser.DOT)

                self.state = 736
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 737
                self.unary_operator()
                self.state = 738
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 740
                self.function_name()
                self.state = 741
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 754
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE,
                             SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER,
                             SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND,
                             SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT,
                             SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY,
                             SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK,
                             SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT,
                             SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE,
                             SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME,
                             SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT,
                             SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE,
                             SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP,
                             SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE,
                             SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS,
                             SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN,
                             SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP,
                             SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE,
                             SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY,
                             SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD,
                             SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL,
                             SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE,
                             SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO,
                             SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF,
                             SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER,
                             SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY,
                             SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE,
                             SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX,
                             SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE,
                             SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW,
                             SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE,
                             SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO,
                             SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION,
                             SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM,
                             SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN,
                             SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT, SQLiteParser.IDENTIFIER,
                             SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL,
                             SQLiteParser.BLOB_LITERAL]:
                    self.state = 743
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
                    if la_ == 1:
                        self.state = 742
                        self.match(SQLiteParser.K_DISTINCT)

                    self.state = 745
                    self.expr(0)
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 746
                        self.match(SQLiteParser.COMMA)
                        self.state = 747
                        self.expr(0)
                        self.state = 752
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 753
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 756
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 758
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 759
                self.expr(0)
                self.state = 760
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 762
                self.match(SQLiteParser.K_CAST)
                self.state = 763
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 764
                self.expr(0)
                self.state = 765
                self.match(SQLiteParser.K_AS)
                self.state = 766
                self.type_name()
                self.state = 767
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_EXISTS or _la == SQLiteParser.K_NOT:
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_NOT:
                        self.state = 769
                        self.match(SQLiteParser.K_NOT)

                    self.state = 772
                    self.match(SQLiteParser.K_EXISTS)

                self.state = 775
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 776
                self.select_stmt()
                self.state = 777
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 779
                self.match(SQLiteParser.K_CASE)
                self.state = 781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.expr(0)

                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 783
                    self.match(SQLiteParser.K_WHEN)
                    self.state = 784
                    self.expr(0)
                    self.state = 785
                    self.match(SQLiteParser.K_THEN)
                    self.state = 786
                    self.expr(0)
                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.K_WHEN):
                        break

                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_ELSE:
                    self.state = 792
                    self.match(SQLiteParser.K_ELSE)
                    self.state = 793
                    self.expr(0)

                self.state = 796
                self.match(SQLiteParser.K_END)
                pass

            elif la_ == 10:
                self.state = 798
                self.raise_function()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 901
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 899
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 801
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 802
                        self.match(SQLiteParser.PIPE2)
                        self.state = 803
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 804
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 805
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 806
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 807
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 808
                        _la = self._input.LA(1)
                        if not (_la == SQLiteParser.PLUS or _la == SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 809
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 810
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 811
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (
                                1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 812
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 813
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 814
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (
                                1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 815
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 816
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 829
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
                        if la_ == 1:
                            self.state = 817
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 818
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 819
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 820
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 821
                            self.match(SQLiteParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 822
                            self.match(SQLiteParser.K_IS)
                            self.state = 823
                            self.match(SQLiteParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 824
                            self.match(SQLiteParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 825
                            self.match(SQLiteParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 826
                            self.match(SQLiteParser.K_GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 827
                            self.match(SQLiteParser.K_MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 828
                            self.match(SQLiteParser.K_REGEXP)
                            pass

                        self.state = 831
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 832
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 833
                        self.match(SQLiteParser.K_AND)
                        self.state = 834
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 835
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 836
                        self.match(SQLiteParser.K_OR)
                        self.state = 837
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 838
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 839
                        self.match(SQLiteParser.K_IS)
                        self.state = 841
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
                        if la_ == 1:
                            self.state = 840
                            self.match(SQLiteParser.K_NOT)

                        self.state = 843
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 844
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 846
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SQLiteParser.K_NOT:
                            self.state = 845
                            self.match(SQLiteParser.K_NOT)

                        self.state = 848
                        self.match(SQLiteParser.K_BETWEEN)
                        self.state = 849
                        self.expr(0)
                        self.state = 850
                        self.match(SQLiteParser.K_AND)
                        self.state = 851
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 853
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 854
                        self.match(SQLiteParser.K_COLLATE)
                        self.state = 855
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 856
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 858
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SQLiteParser.K_NOT:
                            self.state = 857
                            self.match(SQLiteParser.K_NOT)

                        self.state = 860
                        _la = self._input.LA(1)
                        if not (((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & (
                                (1 << (SQLiteParser.K_GLOB - 77)) | (1 << (SQLiteParser.K_LIKE - 77)) | (
                                1 << (SQLiteParser.K_MATCH - 77)) | (1 << (SQLiteParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 861
                        self.expr(0)
                        self.state = 864
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
                        if la_ == 1:
                            self.state = 862
                            self.match(SQLiteParser.K_ESCAPE)
                            self.state = 863
                            self.expr(0)

                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 866
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 871
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.K_ISNULL]:
                            self.state = 867
                            self.match(SQLiteParser.K_ISNULL)
                            pass
                        elif token in [SQLiteParser.K_NOTNULL]:
                            self.state = 868
                            self.match(SQLiteParser.K_NOTNULL)
                            pass
                        elif token in [SQLiteParser.K_NOT]:
                            self.state = 869
                            self.match(SQLiteParser.K_NOT)
                            self.state = 870
                            self.match(SQLiteParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 873
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 875
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SQLiteParser.K_NOT:
                            self.state = 874
                            self.match(SQLiteParser.K_NOT)

                        self.state = 877
                        self.match(SQLiteParser.K_IN)
                        self.state = 897
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
                        if la_ == 1:
                            self.state = 878
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 888
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
                            if la_ == 1:
                                self.state = 879
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 880
                                self.expr(0)
                                self.state = 885
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == SQLiteParser.COMMA:
                                    self.state = 881
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 882
                                    self.expr(0)
                                    self.state = 887
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 890
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 894
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
                            if la_ == 1:
                                self.state = 891
                                self.database_name()
                                self.state = 892
                                self.match(SQLiteParser.DOT)

                            self.state = 896
                            self.table_name()
                            pass

                        pass

                self.state = 903
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRaise_function"):
                listener.enterRaise_function(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRaise_function"):
                listener.exitRaise_function(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_function"):
                return visitor.visitRaise_function(self)
            else:
                return visitor.visitChildren(self)

    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_function)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.match(SQLiteParser.K_RAISE)
            self.state = 905
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_IGNORE]:
                self.state = 906
                self.match(SQLiteParser.K_IGNORE)
                pass
            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_FAIL, SQLiteParser.K_ROLLBACK]:
                self.state = 907
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.K_ABORT or _la == SQLiteParser.K_FAIL or _la == SQLiteParser.K_ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 908
                self.match(SQLiteParser.COMMA)
                self.state = 909
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 912
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def cte_table_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext, i)

        def K_AS(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_AS)
            else:
                return self.getToken(SQLiteParser.K_AS, i)

        def OPEN_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, i)

        def CLOSE_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWith_clause"):
                listener.enterWith_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWith_clause"):
                listener.exitWith_clause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_clause"):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)

    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_with_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(SQLiteParser.K_WITH)
            self.state = 916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
            if la_ == 1:
                self.state = 915
                self.match(SQLiteParser.K_RECURSIVE)

            self.state = 918
            self.cte_table_name()
            self.state = 919
            self.match(SQLiteParser.K_AS)
            self.state = 920
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 921
            self.select_stmt()
            self.state = 922
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 923
                self.match(SQLiteParser.COMMA)
                self.state = 924
                self.cte_table_name()
                self.state = 925
                self.match(SQLiteParser.K_AS)
                self.state = 926
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 927
                self.select_stmt()
                self.state = 928
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualified_table_name"):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualified_table_name"):
                listener.exitQualified_table_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQualified_table_name"):
                return visitor.visitQualified_table_name(self)
            else:
                return visitor.visitChildren(self)

    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 127, self._ctx)
            if la_ == 1:
                self.state = 935
                self.database_name()
                self.state = 936
                self.match(SQLiteParser.DOT)

            self.state = 940
            self.table_name()
            self.state = 946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_INDEXED]:
                self.state = 941
                self.match(SQLiteParser.K_INDEXED)
                self.state = 942
                self.match(SQLiteParser.K_BY)
                self.state = 943
                self.index_name()
                pass
            elif token in [SQLiteParser.K_NOT]:
                self.state = 944
                self.match(SQLiteParser.K_NOT)
                self.state = 945
                self.match(SQLiteParser.K_INDEXED)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH,
                           SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH,
                           SQLiteParser.K_END, SQLiteParser.K_EXPLAIN, SQLiteParser.K_INSERT, SQLiteParser.K_LIMIT,
                           SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA, SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE,
                           SQLiteParser.K_ROLLBACK, SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET,
                           SQLiteParser.K_UPDATE, SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE,
                           SQLiteParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrdering_term"):
                listener.enterOrdering_term(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrdering_term"):
                listener.exitOrdering_term(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrdering_term"):
                return visitor.visitOrdering_term(self)
            else:
                return visitor.visitChildren(self)

    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ordering_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.expr(0)
            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_COLLATE:
                self.state = 949
                self.match(SQLiteParser.K_COLLATE)
                self.state = 950
                self.collation_name()

            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ASC or _la == SQLiteParser.K_DESC:
                self.state = 953
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.K_ASC or _la == SQLiteParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragma_value"):
                listener.enterPragma_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragma_value"):
                listener.exitPragma_value(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPragma_value"):
                return visitor.visitPragma_value(self)
            else:
                return visitor.visitChildren(self)

    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pragma_value)
        try:
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 958
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def OPEN_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def CLOSE_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCommon_table_expression"):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCommon_table_expression"):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCommon_table_expression"):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)

    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_common_table_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.table_name()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 962
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 963
                self.column_name()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 964
                    self.match(SQLiteParser.COMMA)
                    self.state = 965
                    self.column_name()
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 971
                self.match(SQLiteParser.CLOSE_PAR)

            self.state = 975
            self.match(SQLiteParser.K_AS)
            self.state = 976
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 977
            self.select_stmt()
            self.state = 978
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResult_column"):
                listener.enterResult_column(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResult_column"):
                listener.exitResult_column(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResult_column"):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)

    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_result_column)
        self._la = 0  # Token type
        try:
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 136, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 980
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 981
                self.table_name()
                self.state = 982
                self.match(SQLiteParser.DOT)
                self.state = 983
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 985
                self.expr(0)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_AS or _la == SQLiteParser.IDENTIFIER or _la == SQLiteParser.STRING_LITERAL:
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_AS:
                        self.state = 986
                        self.match(SQLiteParser.K_AS)

                    self.state = 989
                    self.column_alias()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def table_or_subquery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext, i)

        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_or_subquery"):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_or_subquery"):
                listener.exitTable_or_subquery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTable_or_subquery"):
                return visitor.visitTable_or_subquery(self)
            else:
                return visitor.visitChildren(self)

    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_table_or_subquery)
        self._la = 0  # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
                if la_ == 1:
                    self.state = 994
                    self.database_name()
                    self.state = 995
                    self.match(SQLiteParser.DOT)

                self.state = 999
                self.table_name()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.OPEN_PAR or _la == SQLiteParser.K_AS or _la == SQLiteParser.IDENTIFIER or _la == SQLiteParser.STRING_LITERAL:
                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_AS:
                        self.state = 1000
                        self.match(SQLiteParser.K_AS)

                    self.state = 1003
                    self.table_alias()

                self.state = 1011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_INDEXED]:
                    self.state = 1006
                    self.match(SQLiteParser.K_INDEXED)
                    self.state = 1007
                    self.match(SQLiteParser.K_BY)
                    self.state = 1008
                    self.index_name()
                    pass
                elif token in [SQLiteParser.K_NOT]:
                    self.state = 1009
                    self.match(SQLiteParser.K_NOT)
                    self.state = 1010
                    self.match(SQLiteParser.K_INDEXED)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA,
                               SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN,
                               SQLiteParser.K_COMMIT, SQLiteParser.K_CROSS, SQLiteParser.K_DELETE,
                               SQLiteParser.K_DETACH, SQLiteParser.K_END, SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN,
                               SQLiteParser.K_GROUP, SQLiteParser.K_INNER, SQLiteParser.K_INSERT,
                               SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT, SQLiteParser.K_LIMIT,
                               SQLiteParser.K_NATURAL, SQLiteParser.K_ON, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA,
                               SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK,
                               SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION,
                               SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM,
                               SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 142, self._ctx)
                if la_ == 1:
                    self.state = 1014
                    self.table_or_subquery()
                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 1015
                        self.match(SQLiteParser.COMMA)
                        self.state = 1016
                        self.table_or_subquery()
                        self.state = 1021
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1022
                    self.join_clause()
                    pass

                self.state = 1025
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.OPEN_PAR or _la == SQLiteParser.K_AS or _la == SQLiteParser.IDENTIFIER or _la == SQLiteParser.STRING_LITERAL:
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_AS:
                        self.state = 1026
                        self.match(SQLiteParser.K_AS)

                    self.state = 1029
                    self.table_alias()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1032
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1033
                self.select_stmt()
                self.state = 1034
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.OPEN_PAR or _la == SQLiteParser.K_AS or _la == SQLiteParser.IDENTIFIER or _la == SQLiteParser.STRING_LITERAL:
                    self.state = 1036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_AS:
                        self.state = 1035
                        self.match(SQLiteParser.K_AS)

                    self.state = 1038
                    self.table_alias()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext, i)

        def join_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext, i)

        def join_constraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoin_clause"):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)

    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_join_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.table_or_subquery()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA or _la == SQLiteParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and (
                    (1 << (_la - 87)) & ((1 << (SQLiteParser.K_INNER - 87)) | (1 << (SQLiteParser.K_JOIN - 87)) | (
                    1 << (SQLiteParser.K_LEFT - 87)) | (1 << (SQLiteParser.K_NATURAL - 87)))) != 0):
                self.state = 1044
                self.join_operator()
                self.state = 1045
                self.table_or_subquery()
                self.state = 1046
                self.join_constraint()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoin_operator"):
                listener.enterJoin_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoin_operator"):
                listener.exitJoin_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoin_operator"):
                return visitor.visitJoin_operator(self)
            else:
                return visitor.visitChildren(self)

    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_join_operator)
        self._la = 0  # Token type
        try:
            self.state = 1066
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1053
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.K_CROSS, SQLiteParser.K_INNER, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT,
                           SQLiteParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_NATURAL:
                    self.state = 1054
                    self.match(SQLiteParser.K_NATURAL)

                self.state = 1063
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_LEFT]:
                    self.state = 1057
                    self.match(SQLiteParser.K_LEFT)
                    self.state = 1059
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_OUTER:
                        self.state = 1058
                        self.match(SQLiteParser.K_OUTER)

                    pass
                elif token in [SQLiteParser.K_INNER]:
                    self.state = 1061
                    self.match(SQLiteParser.K_INNER)
                    pass
                elif token in [SQLiteParser.K_CROSS]:
                    self.state = 1062
                    self.match(SQLiteParser.K_CROSS)
                    pass
                elif token in [SQLiteParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1065
                self.match(SQLiteParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoin_constraint"):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoin_constraint"):
                listener.exitJoin_constraint(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoin_constraint"):
                return visitor.visitJoin_constraint(self)
            else:
                return visitor.visitChildren(self)

    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_join_constraint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_ON]:
                self.state = 1068
                self.match(SQLiteParser.K_ON)
                self.state = 1069
                self.expr(0)
                pass
            elif token in [SQLiteParser.K_USING]:
                self.state = 1070
                self.match(SQLiteParser.K_USING)
                self.state = 1071
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1072
                self.column_name()
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1073
                    self.match(SQLiteParser.COMMA)
                    self.state = 1074
                    self.column_name()
                    self.state = 1079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1080
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA,
                           SQLiteParser.K_ANALYZE, SQLiteParser.K_ATTACH, SQLiteParser.K_BEGIN, SQLiteParser.K_COMMIT,
                           SQLiteParser.K_CROSS, SQLiteParser.K_DELETE, SQLiteParser.K_DETACH, SQLiteParser.K_END,
                           SQLiteParser.K_EXCEPT, SQLiteParser.K_EXPLAIN, SQLiteParser.K_GROUP, SQLiteParser.K_INNER,
                           SQLiteParser.K_INSERT, SQLiteParser.K_INTERSECT, SQLiteParser.K_JOIN, SQLiteParser.K_LEFT,
                           SQLiteParser.K_LIMIT, SQLiteParser.K_NATURAL, SQLiteParser.K_ORDER, SQLiteParser.K_PRAGMA,
                           SQLiteParser.K_RELEASE, SQLiteParser.K_REPLACE, SQLiteParser.K_ROLLBACK,
                           SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_UNION, SQLiteParser.K_UPDATE,
                           SQLiteParser.K_VACUUM, SQLiteParser.K_VALUES, SQLiteParser.K_WHERE, SQLiteParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def table_or_subquery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext, i)

        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def OPEN_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelect_core"):
                listener.enterSelect_core(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelect_core"):
                listener.exitSelect_core(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelect_core"):
                return visitor.visitSelect_core(self)
            else:
                return visitor.visitChildren(self)

    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_select_core)
        self._la = 0  # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1084
                self.match(SQLiteParser.K_SELECT)
                self.state = 1086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 155, self._ctx)
                if la_ == 1:
                    self.state = 1085
                    _la = self._input.LA(1)
                    if not (_la == SQLiteParser.K_ALL or _la == SQLiteParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1088
                self.result_column()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1089
                    self.match(SQLiteParser.COMMA)
                    self.state = 1090
                    self.result_column()
                    self.state = 1095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_FROM:
                    self.state = 1096
                    self.match(SQLiteParser.K_FROM)
                    self.state = 1106
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 158, self._ctx)
                    if la_ == 1:
                        self.state = 1097
                        self.table_or_subquery()
                        self.state = 1102
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == SQLiteParser.COMMA:
                            self.state = 1098
                            self.match(SQLiteParser.COMMA)
                            self.state = 1099
                            self.table_or_subquery()
                            self.state = 1104
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1105
                        self.join_clause()
                        pass

                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_WHERE:
                    self.state = 1110
                    self.match(SQLiteParser.K_WHERE)
                    self.state = 1111
                    self.expr(0)

                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_GROUP:
                    self.state = 1114
                    self.match(SQLiteParser.K_GROUP)
                    self.state = 1115
                    self.match(SQLiteParser.K_BY)
                    self.state = 1116
                    self.expr(0)
                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 1117
                        self.match(SQLiteParser.COMMA)
                        self.state = 1118
                        self.expr(0)
                        self.state = 1123
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_HAVING:
                        self.state = 1124
                        self.match(SQLiteParser.K_HAVING)
                        self.state = 1125
                        self.expr(0)

                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self.match(SQLiteParser.K_VALUES)
                self.state = 1131
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1132
                self.expr(0)
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1133
                    self.match(SQLiteParser.COMMA)
                    self.state = 1134
                    self.expr(0)
                    self.state = 1139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1140
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1141
                    self.match(SQLiteParser.COMMA)
                    self.state = 1142
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1143
                    self.expr(0)
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 1144
                        self.match(SQLiteParser.COMMA)
                        self.state = 1145
                        self.expr(0)
                        self.state = 1150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1151
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompound_operator"):
                listener.enterCompound_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompound_operator"):
                listener.exitCompound_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompound_operator"):
                return visitor.visitCompound_operator(self)
            else:
                return visitor.visitChildren(self)

    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compound_operator)
        try:
            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1160
                self.match(SQLiteParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.match(SQLiteParser.K_UNION)
                self.state = 1162
                self.match(SQLiteParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1163
                self.match(SQLiteParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1164
                self.match(SQLiteParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCte_table_name"):
                listener.enterCte_table_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCte_table_name"):
                listener.exitCte_table_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCte_table_name"):
                return visitor.visitCte_table_name(self)
            else:
                return visitor.visitChildren(self)

    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_cte_table_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.table_name()
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 1168
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1169
                self.column_name()
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1170
                    self.match(SQLiteParser.COMMA)
                    self.state = 1171
                    self.column_name()
                    self.state = 1176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1177
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSigned_number"):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)

    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_signed_number)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.PLUS or _la == SQLiteParser.MINUS:
                self.state = 1181
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.PLUS or _la == SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1184
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral_value"):
                return visitor.visitLiteral_value(self)
            else:
                return visitor.visitChildren(self)

    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_literal_value)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << SQLiteParser.K_CURRENT_DATE) | (1 << SQLiteParser.K_CURRENT_TIME) | (
                    1 << SQLiteParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and (
                    (1 << (_la - 104)) & (
                    (1 << (SQLiteParser.K_NULL - 104)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 104)) | (
                    1 << (SQLiteParser.STRING_LITERAL - 104)) | (1 << (SQLiteParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnary_operator"):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)

    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_unary_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (
                    1 << SQLiteParser.TILDE))) != 0) or _la == SQLiteParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterError_message"):
                listener.enterError_message(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitError_message"):
                listener.exitError_message(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitError_message"):
                return visitor.visitError_message(self)
            else:
                return visitor.visitChildren(self)

    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumn_alias"):
                listener.enterColumn_alias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumn_alias"):
                listener.exitColumn_alias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumn_alias"):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)

    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_column_alias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            _la = self._input.LA(1)
            if not (_la == SQLiteParser.IDENTIFIER or _la == SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SQLiteParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SQLiteParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SQLiteParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SQLiteParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(SQLiteParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SQLiteParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(SQLiteParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SQLiteParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword"):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)

    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_keyword)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            _la = self._input.LA(1)
            if not (((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & (
                    (1 << (SQLiteParser.K_ABORT - 25)) | (1 << (SQLiteParser.K_ACTION - 25)) | (
                    1 << (SQLiteParser.K_ADD - 25)) | (1 << (SQLiteParser.K_AFTER - 25)) | (
                            1 << (SQLiteParser.K_ALL - 25)) | (1 << (SQLiteParser.K_ALTER - 25)) | (
                            1 << (SQLiteParser.K_ANALYZE - 25)) | (1 << (SQLiteParser.K_AND - 25)) | (
                            1 << (SQLiteParser.K_AS - 25)) | (1 << (SQLiteParser.K_ASC - 25)) | (
                            1 << (SQLiteParser.K_ATTACH - 25)) | (1 << (SQLiteParser.K_AUTOINCREMENT - 25)) | (
                            1 << (SQLiteParser.K_BEFORE - 25)) | (1 << (SQLiteParser.K_BEGIN - 25)) | (
                            1 << (SQLiteParser.K_BETWEEN - 25)) | (1 << (SQLiteParser.K_BY - 25)) | (
                            1 << (SQLiteParser.K_CASCADE - 25)) | (1 << (SQLiteParser.K_CASE - 25)) | (
                            1 << (SQLiteParser.K_CAST - 25)) | (1 << (SQLiteParser.K_CHECK - 25)) | (
                            1 << (SQLiteParser.K_COLLATE - 25)) | (1 << (SQLiteParser.K_COLUMN - 25)) | (
                            1 << (SQLiteParser.K_COMMIT - 25)) | (1 << (SQLiteParser.K_CONFLICT - 25)) | (
                            1 << (SQLiteParser.K_CONSTRAINT - 25)) | (1 << (SQLiteParser.K_CREATE - 25)) | (
                            1 << (SQLiteParser.K_CROSS - 25)) | (1 << (SQLiteParser.K_CURRENT_DATE - 25)) | (
                            1 << (SQLiteParser.K_CURRENT_TIME - 25)) | (
                            1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (SQLiteParser.K_DATABASE - 25)) | (
                            1 << (SQLiteParser.K_DEFAULT - 25)) | (1 << (SQLiteParser.K_DEFERRABLE - 25)) | (
                            1 << (SQLiteParser.K_DEFERRED - 25)) | (1 << (SQLiteParser.K_DELETE - 25)) | (
                            1 << (SQLiteParser.K_DESC - 25)) | (1 << (SQLiteParser.K_DETACH - 25)) | (
                            1 << (SQLiteParser.K_DISTINCT - 25)) | (1 << (SQLiteParser.K_DROP - 25)) | (
                            1 << (SQLiteParser.K_EACH - 25)) | (1 << (SQLiteParser.K_ELSE - 25)) | (
                            1 << (SQLiteParser.K_END - 25)) | (1 << (SQLiteParser.K_ESCAPE - 25)) | (
                            1 << (SQLiteParser.K_EXCEPT - 25)) | (1 << (SQLiteParser.K_EXCLUSIVE - 25)) | (
                            1 << (SQLiteParser.K_EXISTS - 25)) | (1 << (SQLiteParser.K_EXPLAIN - 25)) | (
                            1 << (SQLiteParser.K_FAIL - 25)) | (1 << (SQLiteParser.K_FOR - 25)) | (
                            1 << (SQLiteParser.K_FOREIGN - 25)) | (1 << (SQLiteParser.K_FROM - 25)) | (
                            1 << (SQLiteParser.K_FULL - 25)) | (1 << (SQLiteParser.K_GLOB - 25)) | (
                            1 << (SQLiteParser.K_GROUP - 25)) | (1 << (SQLiteParser.K_HAVING - 25)) | (
                            1 << (SQLiteParser.K_IF - 25)) | (1 << (SQLiteParser.K_IGNORE - 25)) | (
                            1 << (SQLiteParser.K_IMMEDIATE - 25)) | (1 << (SQLiteParser.K_IN - 25)) | (
                            1 << (SQLiteParser.K_INDEX - 25)) | (1 << (SQLiteParser.K_INDEXED - 25)) | (
                            1 << (SQLiteParser.K_INITIALLY - 25)) | (1 << (SQLiteParser.K_INNER - 25)) | (
                            1 << (SQLiteParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and (
                    (1 << (_la - 89)) & (
                    (1 << (SQLiteParser.K_INSTEAD - 89)) | (1 << (SQLiteParser.K_INTERSECT - 89)) | (
                    1 << (SQLiteParser.K_INTO - 89)) | (1 << (SQLiteParser.K_IS - 89)) | (
                            1 << (SQLiteParser.K_ISNULL - 89)) | (1 << (SQLiteParser.K_JOIN - 89)) | (
                            1 << (SQLiteParser.K_KEY - 89)) | (1 << (SQLiteParser.K_LEFT - 89)) | (
                            1 << (SQLiteParser.K_LIKE - 89)) | (1 << (SQLiteParser.K_LIMIT - 89)) | (
                            1 << (SQLiteParser.K_MATCH - 89)) | (1 << (SQLiteParser.K_NATURAL - 89)) | (
                            1 << (SQLiteParser.K_NO - 89)) | (1 << (SQLiteParser.K_NOT - 89)) | (
                            1 << (SQLiteParser.K_NOTNULL - 89)) | (1 << (SQLiteParser.K_NULL - 89)) | (
                            1 << (SQLiteParser.K_OF - 89)) | (1 << (SQLiteParser.K_OFFSET - 89)) | (
                            1 << (SQLiteParser.K_ON - 89)) | (1 << (SQLiteParser.K_OR - 89)) | (
                            1 << (SQLiteParser.K_ORDER - 89)) | (1 << (SQLiteParser.K_OUTER - 89)) | (
                            1 << (SQLiteParser.K_PLAN - 89)) | (1 << (SQLiteParser.K_PRAGMA - 89)) | (
                            1 << (SQLiteParser.K_PRIMARY - 89)) | (1 << (SQLiteParser.K_QUERY - 89)) | (
                            1 << (SQLiteParser.K_RAISE - 89)) | (1 << (SQLiteParser.K_RECURSIVE - 89)) | (
                            1 << (SQLiteParser.K_REFERENCES - 89)) | (1 << (SQLiteParser.K_REGEXP - 89)) | (
                            1 << (SQLiteParser.K_REINDEX - 89)) | (1 << (SQLiteParser.K_RELEASE - 89)) | (
                            1 << (SQLiteParser.K_RENAME - 89)) | (1 << (SQLiteParser.K_REPLACE - 89)) | (
                            1 << (SQLiteParser.K_RESTRICT - 89)) | (1 << (SQLiteParser.K_RIGHT - 89)) | (
                            1 << (SQLiteParser.K_ROLLBACK - 89)) | (1 << (SQLiteParser.K_ROW - 89)) | (
                            1 << (SQLiteParser.K_SAVEPOINT - 89)) | (1 << (SQLiteParser.K_SELECT - 89)) | (
                            1 << (SQLiteParser.K_SET - 89)) | (1 << (SQLiteParser.K_TABLE - 89)) | (
                            1 << (SQLiteParser.K_TEMP - 89)) | (1 << (SQLiteParser.K_TEMPORARY - 89)) | (
                            1 << (SQLiteParser.K_THEN - 89)) | (1 << (SQLiteParser.K_TO - 89)) | (
                            1 << (SQLiteParser.K_TRANSACTION - 89)) | (1 << (SQLiteParser.K_TRIGGER - 89)) | (
                            1 << (SQLiteParser.K_UNION - 89)) | (1 << (SQLiteParser.K_UNIQUE - 89)) | (
                            1 << (SQLiteParser.K_UPDATE - 89)) | (1 << (SQLiteParser.K_USING - 89)) | (
                            1 << (SQLiteParser.K_VACUUM - 89)) | (1 << (SQLiteParser.K_VALUES - 89)) | (
                            1 << (SQLiteParser.K_VIEW - 89)) | (1 << (SQLiteParser.K_VIRTUAL - 89)) | (
                            1 << (SQLiteParser.K_WHEN - 89)) | (1 << (SQLiteParser.K_WHERE - 89)) | (
                            1 << (SQLiteParser.K_WITH - 89)) | (1 << (SQLiteParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitName"):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)

    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_name"):
                listener.enterFunction_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_name"):
                listener.exitFunction_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunction_name"):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)

    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_database_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatabase_name"):
                listener.enterDatabase_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatabase_name"):
                listener.exitDatabase_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatabase_name"):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)

    def database_name(self):

        localctx = SQLiteParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTable_name"):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)

    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_or_index_name"):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_or_index_name"):
                listener.exitTable_or_index_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTable_or_index_name"):
                return visitor.visitTable_or_index_name(self)
            else:
                return visitor.visitChildren(self)

    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumn_name"):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)

    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCollation_name"):
                listener.enterCollation_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCollation_name"):
                listener.exitCollation_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCollation_name"):
                return visitor.visitCollation_name(self)
            else:
                return visitor.visitChildren(self)

    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIndex_name"):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)

    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragma_name"):
                listener.enterPragma_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragma_name"):
                listener.exitPragma_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPragma_name"):
                return visitor.visitPragma_name(self)
            else:
                return visitor.visitChildren(self)

    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSavepoint_name"):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSavepoint_name"):
                listener.exitSavepoint_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSavepoint_name"):
                return visitor.visitSavepoint_name(self)
            else:
                return visitor.visitChildren(self)

    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_alias"):
                listener.enterTable_alias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_alias"):
                listener.exitTable_alias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTable_alias"):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)

    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_table_alias)
        try:
            self.state = 1222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1216
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1217
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1218
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1219
                self.table_alias()
                self.state = 1220
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTransaction_name"):
                listener.enterTransaction_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTransaction_name"):
                listener.exitTransaction_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTransaction_name"):
                return visitor.visitTransaction_name(self)
            else:
                return visitor.visitChildren(self)

    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_name"):
                listener.enterAny_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_name"):
                listener.exitAny_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAny_name"):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)

    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_any_name)
        try:
            self.state = 1233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.K_ABORT, SQLiteParser.K_ACTION, SQLiteParser.K_ADD, SQLiteParser.K_AFTER,
                           SQLiteParser.K_ALL, SQLiteParser.K_ALTER, SQLiteParser.K_ANALYZE, SQLiteParser.K_AND,
                           SQLiteParser.K_AS, SQLiteParser.K_ASC, SQLiteParser.K_ATTACH, SQLiteParser.K_AUTOINCREMENT,
                           SQLiteParser.K_BEFORE, SQLiteParser.K_BEGIN, SQLiteParser.K_BETWEEN, SQLiteParser.K_BY,
                           SQLiteParser.K_CASCADE, SQLiteParser.K_CASE, SQLiteParser.K_CAST, SQLiteParser.K_CHECK,
                           SQLiteParser.K_COLLATE, SQLiteParser.K_COLUMN, SQLiteParser.K_COMMIT,
                           SQLiteParser.K_CONFLICT, SQLiteParser.K_CONSTRAINT, SQLiteParser.K_CREATE,
                           SQLiteParser.K_CROSS, SQLiteParser.K_CURRENT_DATE, SQLiteParser.K_CURRENT_TIME,
                           SQLiteParser.K_CURRENT_TIMESTAMP, SQLiteParser.K_DATABASE, SQLiteParser.K_DEFAULT,
                           SQLiteParser.K_DEFERRABLE, SQLiteParser.K_DEFERRED, SQLiteParser.K_DELETE,
                           SQLiteParser.K_DESC, SQLiteParser.K_DETACH, SQLiteParser.K_DISTINCT, SQLiteParser.K_DROP,
                           SQLiteParser.K_EACH, SQLiteParser.K_ELSE, SQLiteParser.K_END, SQLiteParser.K_ESCAPE,
                           SQLiteParser.K_EXCEPT, SQLiteParser.K_EXCLUSIVE, SQLiteParser.K_EXISTS,
                           SQLiteParser.K_EXPLAIN, SQLiteParser.K_FAIL, SQLiteParser.K_FOR, SQLiteParser.K_FOREIGN,
                           SQLiteParser.K_FROM, SQLiteParser.K_FULL, SQLiteParser.K_GLOB, SQLiteParser.K_GROUP,
                           SQLiteParser.K_HAVING, SQLiteParser.K_IF, SQLiteParser.K_IGNORE, SQLiteParser.K_IMMEDIATE,
                           SQLiteParser.K_IN, SQLiteParser.K_INDEX, SQLiteParser.K_INDEXED, SQLiteParser.K_INITIALLY,
                           SQLiteParser.K_INNER, SQLiteParser.K_INSERT, SQLiteParser.K_INSTEAD,
                           SQLiteParser.K_INTERSECT, SQLiteParser.K_INTO, SQLiteParser.K_IS, SQLiteParser.K_ISNULL,
                           SQLiteParser.K_JOIN, SQLiteParser.K_KEY, SQLiteParser.K_LEFT, SQLiteParser.K_LIKE,
                           SQLiteParser.K_LIMIT, SQLiteParser.K_MATCH, SQLiteParser.K_NATURAL, SQLiteParser.K_NO,
                           SQLiteParser.K_NOT, SQLiteParser.K_NOTNULL, SQLiteParser.K_NULL, SQLiteParser.K_OF,
                           SQLiteParser.K_OFFSET, SQLiteParser.K_ON, SQLiteParser.K_OR, SQLiteParser.K_ORDER,
                           SQLiteParser.K_OUTER, SQLiteParser.K_PLAN, SQLiteParser.K_PRAGMA, SQLiteParser.K_PRIMARY,
                           SQLiteParser.K_QUERY, SQLiteParser.K_RAISE, SQLiteParser.K_RECURSIVE,
                           SQLiteParser.K_REFERENCES, SQLiteParser.K_REGEXP, SQLiteParser.K_REINDEX,
                           SQLiteParser.K_RELEASE, SQLiteParser.K_RENAME, SQLiteParser.K_REPLACE,
                           SQLiteParser.K_RESTRICT, SQLiteParser.K_RIGHT, SQLiteParser.K_ROLLBACK, SQLiteParser.K_ROW,
                           SQLiteParser.K_SAVEPOINT, SQLiteParser.K_SELECT, SQLiteParser.K_SET, SQLiteParser.K_TABLE,
                           SQLiteParser.K_TEMP, SQLiteParser.K_TEMPORARY, SQLiteParser.K_THEN, SQLiteParser.K_TO,
                           SQLiteParser.K_TRANSACTION, SQLiteParser.K_TRIGGER, SQLiteParser.K_UNION,
                           SQLiteParser.K_UNIQUE, SQLiteParser.K_UPDATE, SQLiteParser.K_USING, SQLiteParser.K_VACUUM,
                           SQLiteParser.K_VALUES, SQLiteParser.K_VIEW, SQLiteParser.K_VIRTUAL, SQLiteParser.K_WHEN,
                           SQLiteParser.K_WHERE, SQLiteParser.K_WITH, SQLiteParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1227
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1228
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1229
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1230
                self.any_name()
                self.state = 1231
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx: ExprContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 20)

        if predIndex == 1:
            return self.precpred(self._ctx, 19)

        if predIndex == 2:
            return self.precpred(self._ctx, 18)

        if predIndex == 3:
            return self.precpred(self._ctx, 17)

        if predIndex == 4:
            return self.precpred(self._ctx, 16)

        if predIndex == 5:
            return self.precpred(self._ctx, 15)

        if predIndex == 6:
            return self.precpred(self._ctx, 14)

        if predIndex == 7:
            return self.precpred(self._ctx, 13)

        if predIndex == 8:
            return self.precpred(self._ctx, 6)

        if predIndex == 9:
            return self.precpred(self._ctx, 5)

        if predIndex == 10:
            return self.precpred(self._ctx, 9)

        if predIndex == 11:
            return self.precpred(self._ctx, 8)

        if predIndex == 12:
            return self.precpred(self._ctx, 7)

        if predIndex == 13:
            return self.precpred(self._ctx, 4)
